// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offboard/offboard.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_offboard_2foffboard_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_offboard_2foffboard_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_offboard_2foffboard_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_offboard_2foffboard_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[32]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_offboard_2foffboard_2eproto;
namespace mavsdk {
namespace rpc {
namespace offboard {
class ActuatorControl;
class ActuatorControlDefaultTypeInternal;
extern ActuatorControlDefaultTypeInternal _ActuatorControl_default_instance_;
class ActuatorControlGroup;
class ActuatorControlGroupDefaultTypeInternal;
extern ActuatorControlGroupDefaultTypeInternal _ActuatorControlGroup_default_instance_;
class Attitude;
class AttitudeDefaultTypeInternal;
extern AttitudeDefaultTypeInternal _Attitude_default_instance_;
class AttitudeRate;
class AttitudeRateDefaultTypeInternal;
extern AttitudeRateDefaultTypeInternal _AttitudeRate_default_instance_;
class IsActiveRequest;
class IsActiveRequestDefaultTypeInternal;
extern IsActiveRequestDefaultTypeInternal _IsActiveRequest_default_instance_;
class IsActiveResponse;
class IsActiveResponseDefaultTypeInternal;
extern IsActiveResponseDefaultTypeInternal _IsActiveResponse_default_instance_;
class OffboardResult;
class OffboardResultDefaultTypeInternal;
extern OffboardResultDefaultTypeInternal _OffboardResult_default_instance_;
class PositionGlobalYaw;
class PositionGlobalYawDefaultTypeInternal;
extern PositionGlobalYawDefaultTypeInternal _PositionGlobalYaw_default_instance_;
class PositionNedYaw;
class PositionNedYawDefaultTypeInternal;
extern PositionNedYawDefaultTypeInternal _PositionNedYaw_default_instance_;
class SetActuatorControlRequest;
class SetActuatorControlRequestDefaultTypeInternal;
extern SetActuatorControlRequestDefaultTypeInternal _SetActuatorControlRequest_default_instance_;
class SetActuatorControlResponse;
class SetActuatorControlResponseDefaultTypeInternal;
extern SetActuatorControlResponseDefaultTypeInternal _SetActuatorControlResponse_default_instance_;
class SetAttitudeRateRequest;
class SetAttitudeRateRequestDefaultTypeInternal;
extern SetAttitudeRateRequestDefaultTypeInternal _SetAttitudeRateRequest_default_instance_;
class SetAttitudeRateResponse;
class SetAttitudeRateResponseDefaultTypeInternal;
extern SetAttitudeRateResponseDefaultTypeInternal _SetAttitudeRateResponse_default_instance_;
class SetAttitudeRequest;
class SetAttitudeRequestDefaultTypeInternal;
extern SetAttitudeRequestDefaultTypeInternal _SetAttitudeRequest_default_instance_;
class SetAttitudeResponse;
class SetAttitudeResponseDefaultTypeInternal;
extern SetAttitudeResponseDefaultTypeInternal _SetAttitudeResponse_default_instance_;
class SetPositionGlobalRequest;
class SetPositionGlobalRequestDefaultTypeInternal;
extern SetPositionGlobalRequestDefaultTypeInternal _SetPositionGlobalRequest_default_instance_;
class SetPositionGlobalResponse;
class SetPositionGlobalResponseDefaultTypeInternal;
extern SetPositionGlobalResponseDefaultTypeInternal _SetPositionGlobalResponse_default_instance_;
class SetPositionNedRequest;
class SetPositionNedRequestDefaultTypeInternal;
extern SetPositionNedRequestDefaultTypeInternal _SetPositionNedRequest_default_instance_;
class SetPositionNedResponse;
class SetPositionNedResponseDefaultTypeInternal;
extern SetPositionNedResponseDefaultTypeInternal _SetPositionNedResponse_default_instance_;
class SetVelocityBodyRequest;
class SetVelocityBodyRequestDefaultTypeInternal;
extern SetVelocityBodyRequestDefaultTypeInternal _SetVelocityBodyRequest_default_instance_;
class SetVelocityBodyResponse;
class SetVelocityBodyResponseDefaultTypeInternal;
extern SetVelocityBodyResponseDefaultTypeInternal _SetVelocityBodyResponse_default_instance_;
class SetVelocityGlobalRequest;
class SetVelocityGlobalRequestDefaultTypeInternal;
extern SetVelocityGlobalRequestDefaultTypeInternal _SetVelocityGlobalRequest_default_instance_;
class SetVelocityGlobalResponse;
class SetVelocityGlobalResponseDefaultTypeInternal;
extern SetVelocityGlobalResponseDefaultTypeInternal _SetVelocityGlobalResponse_default_instance_;
class SetVelocityNedRequest;
class SetVelocityNedRequestDefaultTypeInternal;
extern SetVelocityNedRequestDefaultTypeInternal _SetVelocityNedRequest_default_instance_;
class SetVelocityNedResponse;
class SetVelocityNedResponseDefaultTypeInternal;
extern SetVelocityNedResponseDefaultTypeInternal _SetVelocityNedResponse_default_instance_;
class StartRequest;
class StartRequestDefaultTypeInternal;
extern StartRequestDefaultTypeInternal _StartRequest_default_instance_;
class StartResponse;
class StartResponseDefaultTypeInternal;
extern StartResponseDefaultTypeInternal _StartResponse_default_instance_;
class StopRequest;
class StopRequestDefaultTypeInternal;
extern StopRequestDefaultTypeInternal _StopRequest_default_instance_;
class StopResponse;
class StopResponseDefaultTypeInternal;
extern StopResponseDefaultTypeInternal _StopResponse_default_instance_;
class VelocityBodyYawspeed;
class VelocityBodyYawspeedDefaultTypeInternal;
extern VelocityBodyYawspeedDefaultTypeInternal _VelocityBodyYawspeed_default_instance_;
class VelocityGlobalYaw;
class VelocityGlobalYawDefaultTypeInternal;
extern VelocityGlobalYawDefaultTypeInternal _VelocityGlobalYaw_default_instance_;
class VelocityNedYaw;
class VelocityNedYawDefaultTypeInternal;
extern VelocityNedYawDefaultTypeInternal _VelocityNedYaw_default_instance_;
}  // namespace offboard
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::offboard::ActuatorControl* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::ActuatorControl>(Arena*);
template<> ::mavsdk::rpc::offboard::ActuatorControlGroup* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::ActuatorControlGroup>(Arena*);
template<> ::mavsdk::rpc::offboard::Attitude* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::Attitude>(Arena*);
template<> ::mavsdk::rpc::offboard::AttitudeRate* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::AttitudeRate>(Arena*);
template<> ::mavsdk::rpc::offboard::IsActiveRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::IsActiveRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::IsActiveResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::IsActiveResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::OffboardResult* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(Arena*);
template<> ::mavsdk::rpc::offboard::PositionGlobalYaw* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::PositionGlobalYaw>(Arena*);
template<> ::mavsdk::rpc::offboard::PositionNedYaw* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::PositionNedYaw>(Arena*);
template<> ::mavsdk::rpc::offboard::SetActuatorControlRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetActuatorControlRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::SetActuatorControlResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetActuatorControlResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::SetAttitudeRateRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetAttitudeRateRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::SetAttitudeRateResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetAttitudeRateResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::SetAttitudeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetAttitudeRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::SetAttitudeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetAttitudeResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::SetPositionGlobalRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetPositionGlobalRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::SetPositionGlobalResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetPositionGlobalResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::SetPositionNedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetPositionNedRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::SetPositionNedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetPositionNedResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::SetVelocityBodyRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetVelocityBodyRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::SetVelocityBodyResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetVelocityBodyResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::SetVelocityGlobalRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetVelocityGlobalRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::SetVelocityGlobalResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetVelocityGlobalResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::SetVelocityNedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetVelocityNedRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::SetVelocityNedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::SetVelocityNedResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::StartRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::StartRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::StartResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::StartResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::StopRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::StopRequest>(Arena*);
template<> ::mavsdk::rpc::offboard::StopResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::StopResponse>(Arena*);
template<> ::mavsdk::rpc::offboard::VelocityBodyYawspeed* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::VelocityBodyYawspeed>(Arena*);
template<> ::mavsdk::rpc::offboard::VelocityGlobalYaw* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::VelocityGlobalYaw>(Arena*);
template<> ::mavsdk::rpc::offboard::VelocityNedYaw* Arena::CreateMaybeMessage<::mavsdk::rpc::offboard::VelocityNedYaw>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace offboard {

enum OffboardResult_Result : int {
  OffboardResult_Result_RESULT_UNKNOWN = 0,
  OffboardResult_Result_RESULT_SUCCESS = 1,
  OffboardResult_Result_RESULT_NO_SYSTEM = 2,
  OffboardResult_Result_RESULT_CONNECTION_ERROR = 3,
  OffboardResult_Result_RESULT_BUSY = 4,
  OffboardResult_Result_RESULT_COMMAND_DENIED = 5,
  OffboardResult_Result_RESULT_TIMEOUT = 6,
  OffboardResult_Result_RESULT_NO_SETPOINT_SET = 7,
  OffboardResult_Result_OffboardResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OffboardResult_Result_OffboardResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OffboardResult_Result_IsValid(int value);
constexpr OffboardResult_Result OffboardResult_Result_Result_MIN = OffboardResult_Result_RESULT_UNKNOWN;
constexpr OffboardResult_Result OffboardResult_Result_Result_MAX = OffboardResult_Result_RESULT_NO_SETPOINT_SET;
constexpr int OffboardResult_Result_Result_ARRAYSIZE = OffboardResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OffboardResult_Result_descriptor();
template<typename T>
inline const std::string& OffboardResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OffboardResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OffboardResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OffboardResult_Result_descriptor(), enum_t_value);
}
inline bool OffboardResult_Result_Parse(
    const std::string& name, OffboardResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OffboardResult_Result>(
    OffboardResult_Result_descriptor(), name, value);
}
// ===================================================================

class StartRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.StartRequest) */ {
 public:
  StartRequest();
  virtual ~StartRequest();

  StartRequest(const StartRequest& from);
  StartRequest(StartRequest&& from) noexcept
    : StartRequest() {
    *this = ::std::move(from);
  }

  inline StartRequest& operator=(const StartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRequest& operator=(StartRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartRequest* internal_default_instance() {
    return reinterpret_cast<const StartRequest*>(
               &_StartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StartRequest& a, StartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartRequest* New() const final {
    return CreateMaybeMessage<StartRequest>(nullptr);
  }

  StartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartRequest& from);
  void MergeFrom(const StartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.StartRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.StartRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class StartResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.StartResponse) */ {
 public:
  StartResponse();
  virtual ~StartResponse();

  StartResponse(const StartResponse& from);
  StartResponse(StartResponse&& from) noexcept
    : StartResponse() {
    *this = ::std::move(from);
  }

  inline StartResponse& operator=(const StartResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartResponse& operator=(StartResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartResponse* internal_default_instance() {
    return reinterpret_cast<const StartResponse*>(
               &_StartResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StartResponse& a, StartResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartResponse* New() const final {
    return CreateMaybeMessage<StartResponse>(nullptr);
  }

  StartResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartResponse& from);
  void MergeFrom(const StartResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.StartResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  bool has_offboard_result() const;
  private:
  bool _internal_has_offboard_result() const;
  public:
  void clear_offboard_result();
  const ::mavsdk::rpc::offboard::OffboardResult& offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* release_offboard_result();
  ::mavsdk::rpc::offboard::OffboardResult* mutable_offboard_result();
  void set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  private:
  const ::mavsdk::rpc::offboard::OffboardResult& _internal_offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* _internal_mutable_offboard_result();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.StartResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::offboard::OffboardResult* offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class StopRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.StopRequest) */ {
 public:
  StopRequest();
  virtual ~StopRequest();

  StopRequest(const StopRequest& from);
  StopRequest(StopRequest&& from) noexcept
    : StopRequest() {
    *this = ::std::move(from);
  }

  inline StopRequest& operator=(const StopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRequest& operator=(StopRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopRequest* internal_default_instance() {
    return reinterpret_cast<const StopRequest*>(
               &_StopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StopRequest& a, StopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRequest* New() const final {
    return CreateMaybeMessage<StopRequest>(nullptr);
  }

  StopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRequest& from);
  void MergeFrom(const StopRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.StopRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.StopRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class StopResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.StopResponse) */ {
 public:
  StopResponse();
  virtual ~StopResponse();

  StopResponse(const StopResponse& from);
  StopResponse(StopResponse&& from) noexcept
    : StopResponse() {
    *this = ::std::move(from);
  }

  inline StopResponse& operator=(const StopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopResponse& operator=(StopResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopResponse* internal_default_instance() {
    return reinterpret_cast<const StopResponse*>(
               &_StopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StopResponse& a, StopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopResponse* New() const final {
    return CreateMaybeMessage<StopResponse>(nullptr);
  }

  StopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopResponse& from);
  void MergeFrom(const StopResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.StopResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  bool has_offboard_result() const;
  private:
  bool _internal_has_offboard_result() const;
  public:
  void clear_offboard_result();
  const ::mavsdk::rpc::offboard::OffboardResult& offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* release_offboard_result();
  ::mavsdk::rpc::offboard::OffboardResult* mutable_offboard_result();
  void set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  private:
  const ::mavsdk::rpc::offboard::OffboardResult& _internal_offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* _internal_mutable_offboard_result();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.StopResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::offboard::OffboardResult* offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class IsActiveRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.IsActiveRequest) */ {
 public:
  IsActiveRequest();
  virtual ~IsActiveRequest();

  IsActiveRequest(const IsActiveRequest& from);
  IsActiveRequest(IsActiveRequest&& from) noexcept
    : IsActiveRequest() {
    *this = ::std::move(from);
  }

  inline IsActiveRequest& operator=(const IsActiveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsActiveRequest& operator=(IsActiveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsActiveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsActiveRequest* internal_default_instance() {
    return reinterpret_cast<const IsActiveRequest*>(
               &_IsActiveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IsActiveRequest& a, IsActiveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IsActiveRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsActiveRequest* New() const final {
    return CreateMaybeMessage<IsActiveRequest>(nullptr);
  }

  IsActiveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsActiveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsActiveRequest& from);
  void MergeFrom(const IsActiveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsActiveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.IsActiveRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.IsActiveRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class IsActiveResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.IsActiveResponse) */ {
 public:
  IsActiveResponse();
  virtual ~IsActiveResponse();

  IsActiveResponse(const IsActiveResponse& from);
  IsActiveResponse(IsActiveResponse&& from) noexcept
    : IsActiveResponse() {
    *this = ::std::move(from);
  }

  inline IsActiveResponse& operator=(const IsActiveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsActiveResponse& operator=(IsActiveResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsActiveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsActiveResponse* internal_default_instance() {
    return reinterpret_cast<const IsActiveResponse*>(
               &_IsActiveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IsActiveResponse& a, IsActiveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IsActiveResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsActiveResponse* New() const final {
    return CreateMaybeMessage<IsActiveResponse>(nullptr);
  }

  IsActiveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsActiveResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsActiveResponse& from);
  void MergeFrom(const IsActiveResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsActiveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.IsActiveResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsActiveFieldNumber = 1,
  };
  // bool is_active = 1;
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.IsActiveResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetAttitudeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetAttitudeRequest) */ {
 public:
  SetAttitudeRequest();
  virtual ~SetAttitudeRequest();

  SetAttitudeRequest(const SetAttitudeRequest& from);
  SetAttitudeRequest(SetAttitudeRequest&& from) noexcept
    : SetAttitudeRequest() {
    *this = ::std::move(from);
  }

  inline SetAttitudeRequest& operator=(const SetAttitudeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAttitudeRequest& operator=(SetAttitudeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetAttitudeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAttitudeRequest* internal_default_instance() {
    return reinterpret_cast<const SetAttitudeRequest*>(
               &_SetAttitudeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SetAttitudeRequest& a, SetAttitudeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAttitudeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetAttitudeRequest* New() const final {
    return CreateMaybeMessage<SetAttitudeRequest>(nullptr);
  }

  SetAttitudeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAttitudeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetAttitudeRequest& from);
  void MergeFrom(const SetAttitudeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAttitudeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetAttitudeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttitudeFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.Attitude attitude = 1;
  bool has_attitude() const;
  private:
  bool _internal_has_attitude() const;
  public:
  void clear_attitude();
  const ::mavsdk::rpc::offboard::Attitude& attitude() const;
  ::mavsdk::rpc::offboard::Attitude* release_attitude();
  ::mavsdk::rpc::offboard::Attitude* mutable_attitude();
  void set_allocated_attitude(::mavsdk::rpc::offboard::Attitude* attitude);
  private:
  const ::mavsdk::rpc::offboard::Attitude& _internal_attitude() const;
  ::mavsdk::rpc::offboard::Attitude* _internal_mutable_attitude();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetAttitudeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::offboard::Attitude* attitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetAttitudeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetAttitudeResponse) */ {
 public:
  SetAttitudeResponse();
  virtual ~SetAttitudeResponse();

  SetAttitudeResponse(const SetAttitudeResponse& from);
  SetAttitudeResponse(SetAttitudeResponse&& from) noexcept
    : SetAttitudeResponse() {
    *this = ::std::move(from);
  }

  inline SetAttitudeResponse& operator=(const SetAttitudeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAttitudeResponse& operator=(SetAttitudeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetAttitudeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAttitudeResponse* internal_default_instance() {
    return reinterpret_cast<const SetAttitudeResponse*>(
               &_SetAttitudeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SetAttitudeResponse& a, SetAttitudeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAttitudeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetAttitudeResponse* New() const final {
    return CreateMaybeMessage<SetAttitudeResponse>(nullptr);
  }

  SetAttitudeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAttitudeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetAttitudeResponse& from);
  void MergeFrom(const SetAttitudeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAttitudeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetAttitudeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  bool has_offboard_result() const;
  private:
  bool _internal_has_offboard_result() const;
  public:
  void clear_offboard_result();
  const ::mavsdk::rpc::offboard::OffboardResult& offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* release_offboard_result();
  ::mavsdk::rpc::offboard::OffboardResult* mutable_offboard_result();
  void set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  private:
  const ::mavsdk::rpc::offboard::OffboardResult& _internal_offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* _internal_mutable_offboard_result();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetAttitudeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::offboard::OffboardResult* offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetActuatorControlRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetActuatorControlRequest) */ {
 public:
  SetActuatorControlRequest();
  virtual ~SetActuatorControlRequest();

  SetActuatorControlRequest(const SetActuatorControlRequest& from);
  SetActuatorControlRequest(SetActuatorControlRequest&& from) noexcept
    : SetActuatorControlRequest() {
    *this = ::std::move(from);
  }

  inline SetActuatorControlRequest& operator=(const SetActuatorControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetActuatorControlRequest& operator=(SetActuatorControlRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetActuatorControlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetActuatorControlRequest* internal_default_instance() {
    return reinterpret_cast<const SetActuatorControlRequest*>(
               &_SetActuatorControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SetActuatorControlRequest& a, SetActuatorControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetActuatorControlRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetActuatorControlRequest* New() const final {
    return CreateMaybeMessage<SetActuatorControlRequest>(nullptr);
  }

  SetActuatorControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetActuatorControlRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetActuatorControlRequest& from);
  void MergeFrom(const SetActuatorControlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetActuatorControlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetActuatorControlRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActuatorControlFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.ActuatorControl actuator_control = 1;
  bool has_actuator_control() const;
  private:
  bool _internal_has_actuator_control() const;
  public:
  void clear_actuator_control();
  const ::mavsdk::rpc::offboard::ActuatorControl& actuator_control() const;
  ::mavsdk::rpc::offboard::ActuatorControl* release_actuator_control();
  ::mavsdk::rpc::offboard::ActuatorControl* mutable_actuator_control();
  void set_allocated_actuator_control(::mavsdk::rpc::offboard::ActuatorControl* actuator_control);
  private:
  const ::mavsdk::rpc::offboard::ActuatorControl& _internal_actuator_control() const;
  ::mavsdk::rpc::offboard::ActuatorControl* _internal_mutable_actuator_control();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetActuatorControlRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::offboard::ActuatorControl* actuator_control_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetActuatorControlResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetActuatorControlResponse) */ {
 public:
  SetActuatorControlResponse();
  virtual ~SetActuatorControlResponse();

  SetActuatorControlResponse(const SetActuatorControlResponse& from);
  SetActuatorControlResponse(SetActuatorControlResponse&& from) noexcept
    : SetActuatorControlResponse() {
    *this = ::std::move(from);
  }

  inline SetActuatorControlResponse& operator=(const SetActuatorControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetActuatorControlResponse& operator=(SetActuatorControlResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetActuatorControlResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetActuatorControlResponse* internal_default_instance() {
    return reinterpret_cast<const SetActuatorControlResponse*>(
               &_SetActuatorControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SetActuatorControlResponse& a, SetActuatorControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetActuatorControlResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetActuatorControlResponse* New() const final {
    return CreateMaybeMessage<SetActuatorControlResponse>(nullptr);
  }

  SetActuatorControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetActuatorControlResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetActuatorControlResponse& from);
  void MergeFrom(const SetActuatorControlResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetActuatorControlResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetActuatorControlResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  bool has_offboard_result() const;
  private:
  bool _internal_has_offboard_result() const;
  public:
  void clear_offboard_result();
  const ::mavsdk::rpc::offboard::OffboardResult& offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* release_offboard_result();
  ::mavsdk::rpc::offboard::OffboardResult* mutable_offboard_result();
  void set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  private:
  const ::mavsdk::rpc::offboard::OffboardResult& _internal_offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* _internal_mutable_offboard_result();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetActuatorControlResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::offboard::OffboardResult* offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetAttitudeRateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetAttitudeRateRequest) */ {
 public:
  SetAttitudeRateRequest();
  virtual ~SetAttitudeRateRequest();

  SetAttitudeRateRequest(const SetAttitudeRateRequest& from);
  SetAttitudeRateRequest(SetAttitudeRateRequest&& from) noexcept
    : SetAttitudeRateRequest() {
    *this = ::std::move(from);
  }

  inline SetAttitudeRateRequest& operator=(const SetAttitudeRateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAttitudeRateRequest& operator=(SetAttitudeRateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetAttitudeRateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAttitudeRateRequest* internal_default_instance() {
    return reinterpret_cast<const SetAttitudeRateRequest*>(
               &_SetAttitudeRateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SetAttitudeRateRequest& a, SetAttitudeRateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAttitudeRateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetAttitudeRateRequest* New() const final {
    return CreateMaybeMessage<SetAttitudeRateRequest>(nullptr);
  }

  SetAttitudeRateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAttitudeRateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetAttitudeRateRequest& from);
  void MergeFrom(const SetAttitudeRateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAttitudeRateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetAttitudeRateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttitudeRateFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.AttitudeRate attitude_rate = 1;
  bool has_attitude_rate() const;
  private:
  bool _internal_has_attitude_rate() const;
  public:
  void clear_attitude_rate();
  const ::mavsdk::rpc::offboard::AttitudeRate& attitude_rate() const;
  ::mavsdk::rpc::offboard::AttitudeRate* release_attitude_rate();
  ::mavsdk::rpc::offboard::AttitudeRate* mutable_attitude_rate();
  void set_allocated_attitude_rate(::mavsdk::rpc::offboard::AttitudeRate* attitude_rate);
  private:
  const ::mavsdk::rpc::offboard::AttitudeRate& _internal_attitude_rate() const;
  ::mavsdk::rpc::offboard::AttitudeRate* _internal_mutable_attitude_rate();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetAttitudeRateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::offboard::AttitudeRate* attitude_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetAttitudeRateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetAttitudeRateResponse) */ {
 public:
  SetAttitudeRateResponse();
  virtual ~SetAttitudeRateResponse();

  SetAttitudeRateResponse(const SetAttitudeRateResponse& from);
  SetAttitudeRateResponse(SetAttitudeRateResponse&& from) noexcept
    : SetAttitudeRateResponse() {
    *this = ::std::move(from);
  }

  inline SetAttitudeRateResponse& operator=(const SetAttitudeRateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAttitudeRateResponse& operator=(SetAttitudeRateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetAttitudeRateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAttitudeRateResponse* internal_default_instance() {
    return reinterpret_cast<const SetAttitudeRateResponse*>(
               &_SetAttitudeRateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SetAttitudeRateResponse& a, SetAttitudeRateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAttitudeRateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetAttitudeRateResponse* New() const final {
    return CreateMaybeMessage<SetAttitudeRateResponse>(nullptr);
  }

  SetAttitudeRateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAttitudeRateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetAttitudeRateResponse& from);
  void MergeFrom(const SetAttitudeRateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAttitudeRateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetAttitudeRateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  bool has_offboard_result() const;
  private:
  bool _internal_has_offboard_result() const;
  public:
  void clear_offboard_result();
  const ::mavsdk::rpc::offboard::OffboardResult& offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* release_offboard_result();
  ::mavsdk::rpc::offboard::OffboardResult* mutable_offboard_result();
  void set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  private:
  const ::mavsdk::rpc::offboard::OffboardResult& _internal_offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* _internal_mutable_offboard_result();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetAttitudeRateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::offboard::OffboardResult* offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetPositionNedRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetPositionNedRequest) */ {
 public:
  SetPositionNedRequest();
  virtual ~SetPositionNedRequest();

  SetPositionNedRequest(const SetPositionNedRequest& from);
  SetPositionNedRequest(SetPositionNedRequest&& from) noexcept
    : SetPositionNedRequest() {
    *this = ::std::move(from);
  }

  inline SetPositionNedRequest& operator=(const SetPositionNedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPositionNedRequest& operator=(SetPositionNedRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPositionNedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPositionNedRequest* internal_default_instance() {
    return reinterpret_cast<const SetPositionNedRequest*>(
               &_SetPositionNedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SetPositionNedRequest& a, SetPositionNedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPositionNedRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPositionNedRequest* New() const final {
    return CreateMaybeMessage<SetPositionNedRequest>(nullptr);
  }

  SetPositionNedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPositionNedRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPositionNedRequest& from);
  void MergeFrom(const SetPositionNedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPositionNedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetPositionNedRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionNedYawFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.PositionNedYaw position_ned_yaw = 1;
  bool has_position_ned_yaw() const;
  private:
  bool _internal_has_position_ned_yaw() const;
  public:
  void clear_position_ned_yaw();
  const ::mavsdk::rpc::offboard::PositionNedYaw& position_ned_yaw() const;
  ::mavsdk::rpc::offboard::PositionNedYaw* release_position_ned_yaw();
  ::mavsdk::rpc::offboard::PositionNedYaw* mutable_position_ned_yaw();
  void set_allocated_position_ned_yaw(::mavsdk::rpc::offboard::PositionNedYaw* position_ned_yaw);
  private:
  const ::mavsdk::rpc::offboard::PositionNedYaw& _internal_position_ned_yaw() const;
  ::mavsdk::rpc::offboard::PositionNedYaw* _internal_mutable_position_ned_yaw();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetPositionNedRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::offboard::PositionNedYaw* position_ned_yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetPositionNedResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetPositionNedResponse) */ {
 public:
  SetPositionNedResponse();
  virtual ~SetPositionNedResponse();

  SetPositionNedResponse(const SetPositionNedResponse& from);
  SetPositionNedResponse(SetPositionNedResponse&& from) noexcept
    : SetPositionNedResponse() {
    *this = ::std::move(from);
  }

  inline SetPositionNedResponse& operator=(const SetPositionNedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPositionNedResponse& operator=(SetPositionNedResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPositionNedResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPositionNedResponse* internal_default_instance() {
    return reinterpret_cast<const SetPositionNedResponse*>(
               &_SetPositionNedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SetPositionNedResponse& a, SetPositionNedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPositionNedResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPositionNedResponse* New() const final {
    return CreateMaybeMessage<SetPositionNedResponse>(nullptr);
  }

  SetPositionNedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPositionNedResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPositionNedResponse& from);
  void MergeFrom(const SetPositionNedResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPositionNedResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetPositionNedResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  bool has_offboard_result() const;
  private:
  bool _internal_has_offboard_result() const;
  public:
  void clear_offboard_result();
  const ::mavsdk::rpc::offboard::OffboardResult& offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* release_offboard_result();
  ::mavsdk::rpc::offboard::OffboardResult* mutable_offboard_result();
  void set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  private:
  const ::mavsdk::rpc::offboard::OffboardResult& _internal_offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* _internal_mutable_offboard_result();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetPositionNedResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::offboard::OffboardResult* offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetPositionGlobalRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetPositionGlobalRequest) */ {
 public:
  SetPositionGlobalRequest();
  virtual ~SetPositionGlobalRequest();

  SetPositionGlobalRequest(const SetPositionGlobalRequest& from);
  SetPositionGlobalRequest(SetPositionGlobalRequest&& from) noexcept
    : SetPositionGlobalRequest() {
    *this = ::std::move(from);
  }

  inline SetPositionGlobalRequest& operator=(const SetPositionGlobalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPositionGlobalRequest& operator=(SetPositionGlobalRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPositionGlobalRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPositionGlobalRequest* internal_default_instance() {
    return reinterpret_cast<const SetPositionGlobalRequest*>(
               &_SetPositionGlobalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SetPositionGlobalRequest& a, SetPositionGlobalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPositionGlobalRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPositionGlobalRequest* New() const final {
    return CreateMaybeMessage<SetPositionGlobalRequest>(nullptr);
  }

  SetPositionGlobalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPositionGlobalRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPositionGlobalRequest& from);
  void MergeFrom(const SetPositionGlobalRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPositionGlobalRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetPositionGlobalRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionGlobalYawFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.PositionGlobalYaw position_global_yaw = 1;
  bool has_position_global_yaw() const;
  private:
  bool _internal_has_position_global_yaw() const;
  public:
  void clear_position_global_yaw();
  const ::mavsdk::rpc::offboard::PositionGlobalYaw& position_global_yaw() const;
  ::mavsdk::rpc::offboard::PositionGlobalYaw* release_position_global_yaw();
  ::mavsdk::rpc::offboard::PositionGlobalYaw* mutable_position_global_yaw();
  void set_allocated_position_global_yaw(::mavsdk::rpc::offboard::PositionGlobalYaw* position_global_yaw);
  private:
  const ::mavsdk::rpc::offboard::PositionGlobalYaw& _internal_position_global_yaw() const;
  ::mavsdk::rpc::offboard::PositionGlobalYaw* _internal_mutable_position_global_yaw();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetPositionGlobalRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::offboard::PositionGlobalYaw* position_global_yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetPositionGlobalResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetPositionGlobalResponse) */ {
 public:
  SetPositionGlobalResponse();
  virtual ~SetPositionGlobalResponse();

  SetPositionGlobalResponse(const SetPositionGlobalResponse& from);
  SetPositionGlobalResponse(SetPositionGlobalResponse&& from) noexcept
    : SetPositionGlobalResponse() {
    *this = ::std::move(from);
  }

  inline SetPositionGlobalResponse& operator=(const SetPositionGlobalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPositionGlobalResponse& operator=(SetPositionGlobalResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPositionGlobalResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPositionGlobalResponse* internal_default_instance() {
    return reinterpret_cast<const SetPositionGlobalResponse*>(
               &_SetPositionGlobalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SetPositionGlobalResponse& a, SetPositionGlobalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPositionGlobalResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPositionGlobalResponse* New() const final {
    return CreateMaybeMessage<SetPositionGlobalResponse>(nullptr);
  }

  SetPositionGlobalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPositionGlobalResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPositionGlobalResponse& from);
  void MergeFrom(const SetPositionGlobalResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPositionGlobalResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetPositionGlobalResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  bool has_offboard_result() const;
  private:
  bool _internal_has_offboard_result() const;
  public:
  void clear_offboard_result();
  const ::mavsdk::rpc::offboard::OffboardResult& offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* release_offboard_result();
  ::mavsdk::rpc::offboard::OffboardResult* mutable_offboard_result();
  void set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  private:
  const ::mavsdk::rpc::offboard::OffboardResult& _internal_offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* _internal_mutable_offboard_result();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetPositionGlobalResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::offboard::OffboardResult* offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetVelocityBodyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetVelocityBodyRequest) */ {
 public:
  SetVelocityBodyRequest();
  virtual ~SetVelocityBodyRequest();

  SetVelocityBodyRequest(const SetVelocityBodyRequest& from);
  SetVelocityBodyRequest(SetVelocityBodyRequest&& from) noexcept
    : SetVelocityBodyRequest() {
    *this = ::std::move(from);
  }

  inline SetVelocityBodyRequest& operator=(const SetVelocityBodyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVelocityBodyRequest& operator=(SetVelocityBodyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetVelocityBodyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetVelocityBodyRequest* internal_default_instance() {
    return reinterpret_cast<const SetVelocityBodyRequest*>(
               &_SetVelocityBodyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SetVelocityBodyRequest& a, SetVelocityBodyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVelocityBodyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetVelocityBodyRequest* New() const final {
    return CreateMaybeMessage<SetVelocityBodyRequest>(nullptr);
  }

  SetVelocityBodyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetVelocityBodyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetVelocityBodyRequest& from);
  void MergeFrom(const SetVelocityBodyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVelocityBodyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetVelocityBodyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityBodyYawspeedFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.VelocityBodyYawspeed velocity_body_yawspeed = 1;
  bool has_velocity_body_yawspeed() const;
  private:
  bool _internal_has_velocity_body_yawspeed() const;
  public:
  void clear_velocity_body_yawspeed();
  const ::mavsdk::rpc::offboard::VelocityBodyYawspeed& velocity_body_yawspeed() const;
  ::mavsdk::rpc::offboard::VelocityBodyYawspeed* release_velocity_body_yawspeed();
  ::mavsdk::rpc::offboard::VelocityBodyYawspeed* mutable_velocity_body_yawspeed();
  void set_allocated_velocity_body_yawspeed(::mavsdk::rpc::offboard::VelocityBodyYawspeed* velocity_body_yawspeed);
  private:
  const ::mavsdk::rpc::offboard::VelocityBodyYawspeed& _internal_velocity_body_yawspeed() const;
  ::mavsdk::rpc::offboard::VelocityBodyYawspeed* _internal_mutable_velocity_body_yawspeed();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetVelocityBodyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::offboard::VelocityBodyYawspeed* velocity_body_yawspeed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetVelocityBodyResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetVelocityBodyResponse) */ {
 public:
  SetVelocityBodyResponse();
  virtual ~SetVelocityBodyResponse();

  SetVelocityBodyResponse(const SetVelocityBodyResponse& from);
  SetVelocityBodyResponse(SetVelocityBodyResponse&& from) noexcept
    : SetVelocityBodyResponse() {
    *this = ::std::move(from);
  }

  inline SetVelocityBodyResponse& operator=(const SetVelocityBodyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVelocityBodyResponse& operator=(SetVelocityBodyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetVelocityBodyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetVelocityBodyResponse* internal_default_instance() {
    return reinterpret_cast<const SetVelocityBodyResponse*>(
               &_SetVelocityBodyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SetVelocityBodyResponse& a, SetVelocityBodyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVelocityBodyResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetVelocityBodyResponse* New() const final {
    return CreateMaybeMessage<SetVelocityBodyResponse>(nullptr);
  }

  SetVelocityBodyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetVelocityBodyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetVelocityBodyResponse& from);
  void MergeFrom(const SetVelocityBodyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVelocityBodyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetVelocityBodyResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  bool has_offboard_result() const;
  private:
  bool _internal_has_offboard_result() const;
  public:
  void clear_offboard_result();
  const ::mavsdk::rpc::offboard::OffboardResult& offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* release_offboard_result();
  ::mavsdk::rpc::offboard::OffboardResult* mutable_offboard_result();
  void set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  private:
  const ::mavsdk::rpc::offboard::OffboardResult& _internal_offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* _internal_mutable_offboard_result();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetVelocityBodyResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::offboard::OffboardResult* offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetVelocityNedRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetVelocityNedRequest) */ {
 public:
  SetVelocityNedRequest();
  virtual ~SetVelocityNedRequest();

  SetVelocityNedRequest(const SetVelocityNedRequest& from);
  SetVelocityNedRequest(SetVelocityNedRequest&& from) noexcept
    : SetVelocityNedRequest() {
    *this = ::std::move(from);
  }

  inline SetVelocityNedRequest& operator=(const SetVelocityNedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVelocityNedRequest& operator=(SetVelocityNedRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetVelocityNedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetVelocityNedRequest* internal_default_instance() {
    return reinterpret_cast<const SetVelocityNedRequest*>(
               &_SetVelocityNedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SetVelocityNedRequest& a, SetVelocityNedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVelocityNedRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetVelocityNedRequest* New() const final {
    return CreateMaybeMessage<SetVelocityNedRequest>(nullptr);
  }

  SetVelocityNedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetVelocityNedRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetVelocityNedRequest& from);
  void MergeFrom(const SetVelocityNedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVelocityNedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetVelocityNedRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityNedYawFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.VelocityNedYaw velocity_ned_yaw = 1;
  bool has_velocity_ned_yaw() const;
  private:
  bool _internal_has_velocity_ned_yaw() const;
  public:
  void clear_velocity_ned_yaw();
  const ::mavsdk::rpc::offboard::VelocityNedYaw& velocity_ned_yaw() const;
  ::mavsdk::rpc::offboard::VelocityNedYaw* release_velocity_ned_yaw();
  ::mavsdk::rpc::offboard::VelocityNedYaw* mutable_velocity_ned_yaw();
  void set_allocated_velocity_ned_yaw(::mavsdk::rpc::offboard::VelocityNedYaw* velocity_ned_yaw);
  private:
  const ::mavsdk::rpc::offboard::VelocityNedYaw& _internal_velocity_ned_yaw() const;
  ::mavsdk::rpc::offboard::VelocityNedYaw* _internal_mutable_velocity_ned_yaw();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetVelocityNedRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::offboard::VelocityNedYaw* velocity_ned_yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetVelocityNedResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetVelocityNedResponse) */ {
 public:
  SetVelocityNedResponse();
  virtual ~SetVelocityNedResponse();

  SetVelocityNedResponse(const SetVelocityNedResponse& from);
  SetVelocityNedResponse(SetVelocityNedResponse&& from) noexcept
    : SetVelocityNedResponse() {
    *this = ::std::move(from);
  }

  inline SetVelocityNedResponse& operator=(const SetVelocityNedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVelocityNedResponse& operator=(SetVelocityNedResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetVelocityNedResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetVelocityNedResponse* internal_default_instance() {
    return reinterpret_cast<const SetVelocityNedResponse*>(
               &_SetVelocityNedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SetVelocityNedResponse& a, SetVelocityNedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVelocityNedResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetVelocityNedResponse* New() const final {
    return CreateMaybeMessage<SetVelocityNedResponse>(nullptr);
  }

  SetVelocityNedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetVelocityNedResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetVelocityNedResponse& from);
  void MergeFrom(const SetVelocityNedResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVelocityNedResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetVelocityNedResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  bool has_offboard_result() const;
  private:
  bool _internal_has_offboard_result() const;
  public:
  void clear_offboard_result();
  const ::mavsdk::rpc::offboard::OffboardResult& offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* release_offboard_result();
  ::mavsdk::rpc::offboard::OffboardResult* mutable_offboard_result();
  void set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  private:
  const ::mavsdk::rpc::offboard::OffboardResult& _internal_offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* _internal_mutable_offboard_result();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetVelocityNedResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::offboard::OffboardResult* offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetVelocityGlobalRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetVelocityGlobalRequest) */ {
 public:
  SetVelocityGlobalRequest();
  virtual ~SetVelocityGlobalRequest();

  SetVelocityGlobalRequest(const SetVelocityGlobalRequest& from);
  SetVelocityGlobalRequest(SetVelocityGlobalRequest&& from) noexcept
    : SetVelocityGlobalRequest() {
    *this = ::std::move(from);
  }

  inline SetVelocityGlobalRequest& operator=(const SetVelocityGlobalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVelocityGlobalRequest& operator=(SetVelocityGlobalRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetVelocityGlobalRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetVelocityGlobalRequest* internal_default_instance() {
    return reinterpret_cast<const SetVelocityGlobalRequest*>(
               &_SetVelocityGlobalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SetVelocityGlobalRequest& a, SetVelocityGlobalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVelocityGlobalRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetVelocityGlobalRequest* New() const final {
    return CreateMaybeMessage<SetVelocityGlobalRequest>(nullptr);
  }

  SetVelocityGlobalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetVelocityGlobalRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetVelocityGlobalRequest& from);
  void MergeFrom(const SetVelocityGlobalRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVelocityGlobalRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetVelocityGlobalRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityGlobalYawFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.VelocityGlobalYaw velocity_global_yaw = 1;
  bool has_velocity_global_yaw() const;
  private:
  bool _internal_has_velocity_global_yaw() const;
  public:
  void clear_velocity_global_yaw();
  const ::mavsdk::rpc::offboard::VelocityGlobalYaw& velocity_global_yaw() const;
  ::mavsdk::rpc::offboard::VelocityGlobalYaw* release_velocity_global_yaw();
  ::mavsdk::rpc::offboard::VelocityGlobalYaw* mutable_velocity_global_yaw();
  void set_allocated_velocity_global_yaw(::mavsdk::rpc::offboard::VelocityGlobalYaw* velocity_global_yaw);
  private:
  const ::mavsdk::rpc::offboard::VelocityGlobalYaw& _internal_velocity_global_yaw() const;
  ::mavsdk::rpc::offboard::VelocityGlobalYaw* _internal_mutable_velocity_global_yaw();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetVelocityGlobalRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::offboard::VelocityGlobalYaw* velocity_global_yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class SetVelocityGlobalResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.SetVelocityGlobalResponse) */ {
 public:
  SetVelocityGlobalResponse();
  virtual ~SetVelocityGlobalResponse();

  SetVelocityGlobalResponse(const SetVelocityGlobalResponse& from);
  SetVelocityGlobalResponse(SetVelocityGlobalResponse&& from) noexcept
    : SetVelocityGlobalResponse() {
    *this = ::std::move(from);
  }

  inline SetVelocityGlobalResponse& operator=(const SetVelocityGlobalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVelocityGlobalResponse& operator=(SetVelocityGlobalResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetVelocityGlobalResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetVelocityGlobalResponse* internal_default_instance() {
    return reinterpret_cast<const SetVelocityGlobalResponse*>(
               &_SetVelocityGlobalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SetVelocityGlobalResponse& a, SetVelocityGlobalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVelocityGlobalResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetVelocityGlobalResponse* New() const final {
    return CreateMaybeMessage<SetVelocityGlobalResponse>(nullptr);
  }

  SetVelocityGlobalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetVelocityGlobalResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetVelocityGlobalResponse& from);
  void MergeFrom(const SetVelocityGlobalResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVelocityGlobalResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.SetVelocityGlobalResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  bool has_offboard_result() const;
  private:
  bool _internal_has_offboard_result() const;
  public:
  void clear_offboard_result();
  const ::mavsdk::rpc::offboard::OffboardResult& offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* release_offboard_result();
  ::mavsdk::rpc::offboard::OffboardResult* mutable_offboard_result();
  void set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result);
  private:
  const ::mavsdk::rpc::offboard::OffboardResult& _internal_offboard_result() const;
  ::mavsdk::rpc::offboard::OffboardResult* _internal_mutable_offboard_result();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.SetVelocityGlobalResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::offboard::OffboardResult* offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class Attitude :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.Attitude) */ {
 public:
  Attitude();
  virtual ~Attitude();

  Attitude(const Attitude& from);
  Attitude(Attitude&& from) noexcept
    : Attitude() {
    *this = ::std::move(from);
  }

  inline Attitude& operator=(const Attitude& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attitude& operator=(Attitude&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Attitude& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Attitude* internal_default_instance() {
    return reinterpret_cast<const Attitude*>(
               &_Attitude_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Attitude& a, Attitude& b) {
    a.Swap(&b);
  }
  inline void Swap(Attitude* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Attitude* New() const final {
    return CreateMaybeMessage<Attitude>(nullptr);
  }

  Attitude* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Attitude>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Attitude& from);
  void MergeFrom(const Attitude& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attitude* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.Attitude";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollDegFieldNumber = 1,
    kPitchDegFieldNumber = 2,
    kYawDegFieldNumber = 3,
    kThrustValueFieldNumber = 4,
  };
  // float roll_deg = 1;
  void clear_roll_deg();
  float roll_deg() const;
  void set_roll_deg(float value);
  private:
  float _internal_roll_deg() const;
  void _internal_set_roll_deg(float value);
  public:

  // float pitch_deg = 2;
  void clear_pitch_deg();
  float pitch_deg() const;
  void set_pitch_deg(float value);
  private:
  float _internal_pitch_deg() const;
  void _internal_set_pitch_deg(float value);
  public:

  // float yaw_deg = 3;
  void clear_yaw_deg();
  float yaw_deg() const;
  void set_yaw_deg(float value);
  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);
  public:

  // float thrust_value = 4;
  void clear_thrust_value();
  float thrust_value() const;
  void set_thrust_value(float value);
  private:
  float _internal_thrust_value() const;
  void _internal_set_thrust_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.Attitude)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float roll_deg_;
  float pitch_deg_;
  float yaw_deg_;
  float thrust_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class ActuatorControlGroup :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.ActuatorControlGroup) */ {
 public:
  ActuatorControlGroup();
  virtual ~ActuatorControlGroup();

  ActuatorControlGroup(const ActuatorControlGroup& from);
  ActuatorControlGroup(ActuatorControlGroup&& from) noexcept
    : ActuatorControlGroup() {
    *this = ::std::move(from);
  }

  inline ActuatorControlGroup& operator=(const ActuatorControlGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActuatorControlGroup& operator=(ActuatorControlGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActuatorControlGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActuatorControlGroup* internal_default_instance() {
    return reinterpret_cast<const ActuatorControlGroup*>(
               &_ActuatorControlGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ActuatorControlGroup& a, ActuatorControlGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(ActuatorControlGroup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActuatorControlGroup* New() const final {
    return CreateMaybeMessage<ActuatorControlGroup>(nullptr);
  }

  ActuatorControlGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActuatorControlGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActuatorControlGroup& from);
  void MergeFrom(const ActuatorControlGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActuatorControlGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.ActuatorControlGroup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlsFieldNumber = 1,
  };
  // repeated float controls = 1;
  int controls_size() const;
  private:
  int _internal_controls_size() const;
  public:
  void clear_controls();
  private:
  float _internal_controls(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_controls() const;
  void _internal_add_controls(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_controls();
  public:
  float controls(int index) const;
  void set_controls(int index, float value);
  void add_controls(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      controls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_controls();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.ActuatorControlGroup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > controls_;
  mutable std::atomic<int> _controls_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class ActuatorControl :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.ActuatorControl) */ {
 public:
  ActuatorControl();
  virtual ~ActuatorControl();

  ActuatorControl(const ActuatorControl& from);
  ActuatorControl(ActuatorControl&& from) noexcept
    : ActuatorControl() {
    *this = ::std::move(from);
  }

  inline ActuatorControl& operator=(const ActuatorControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActuatorControl& operator=(ActuatorControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActuatorControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActuatorControl* internal_default_instance() {
    return reinterpret_cast<const ActuatorControl*>(
               &_ActuatorControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ActuatorControl& a, ActuatorControl& b) {
    a.Swap(&b);
  }
  inline void Swap(ActuatorControl* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActuatorControl* New() const final {
    return CreateMaybeMessage<ActuatorControl>(nullptr);
  }

  ActuatorControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActuatorControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActuatorControl& from);
  void MergeFrom(const ActuatorControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActuatorControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.ActuatorControl";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
  };
  // repeated .mavsdk.rpc.offboard.ActuatorControlGroup groups = 1;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::mavsdk::rpc::offboard::ActuatorControlGroup* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::offboard::ActuatorControlGroup >*
      mutable_groups();
  private:
  const ::mavsdk::rpc::offboard::ActuatorControlGroup& _internal_groups(int index) const;
  ::mavsdk::rpc::offboard::ActuatorControlGroup* _internal_add_groups();
  public:
  const ::mavsdk::rpc::offboard::ActuatorControlGroup& groups(int index) const;
  ::mavsdk::rpc::offboard::ActuatorControlGroup* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::offboard::ActuatorControlGroup >&
      groups() const;

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.ActuatorControl)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::offboard::ActuatorControlGroup > groups_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class AttitudeRate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.AttitudeRate) */ {
 public:
  AttitudeRate();
  virtual ~AttitudeRate();

  AttitudeRate(const AttitudeRate& from);
  AttitudeRate(AttitudeRate&& from) noexcept
    : AttitudeRate() {
    *this = ::std::move(from);
  }

  inline AttitudeRate& operator=(const AttitudeRate& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttitudeRate& operator=(AttitudeRate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttitudeRate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttitudeRate* internal_default_instance() {
    return reinterpret_cast<const AttitudeRate*>(
               &_AttitudeRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(AttitudeRate& a, AttitudeRate& b) {
    a.Swap(&b);
  }
  inline void Swap(AttitudeRate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttitudeRate* New() const final {
    return CreateMaybeMessage<AttitudeRate>(nullptr);
  }

  AttitudeRate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttitudeRate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttitudeRate& from);
  void MergeFrom(const AttitudeRate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttitudeRate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.AttitudeRate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollDegSFieldNumber = 1,
    kPitchDegSFieldNumber = 2,
    kYawDegSFieldNumber = 3,
    kThrustValueFieldNumber = 4,
  };
  // float roll_deg_s = 1;
  void clear_roll_deg_s();
  float roll_deg_s() const;
  void set_roll_deg_s(float value);
  private:
  float _internal_roll_deg_s() const;
  void _internal_set_roll_deg_s(float value);
  public:

  // float pitch_deg_s = 2;
  void clear_pitch_deg_s();
  float pitch_deg_s() const;
  void set_pitch_deg_s(float value);
  private:
  float _internal_pitch_deg_s() const;
  void _internal_set_pitch_deg_s(float value);
  public:

  // float yaw_deg_s = 3;
  void clear_yaw_deg_s();
  float yaw_deg_s() const;
  void set_yaw_deg_s(float value);
  private:
  float _internal_yaw_deg_s() const;
  void _internal_set_yaw_deg_s(float value);
  public:

  // float thrust_value = 4;
  void clear_thrust_value();
  float thrust_value() const;
  void set_thrust_value(float value);
  private:
  float _internal_thrust_value() const;
  void _internal_set_thrust_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.AttitudeRate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float roll_deg_s_;
  float pitch_deg_s_;
  float yaw_deg_s_;
  float thrust_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class PositionNedYaw :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.PositionNedYaw) */ {
 public:
  PositionNedYaw();
  virtual ~PositionNedYaw();

  PositionNedYaw(const PositionNedYaw& from);
  PositionNedYaw(PositionNedYaw&& from) noexcept
    : PositionNedYaw() {
    *this = ::std::move(from);
  }

  inline PositionNedYaw& operator=(const PositionNedYaw& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionNedYaw& operator=(PositionNedYaw&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionNedYaw& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionNedYaw* internal_default_instance() {
    return reinterpret_cast<const PositionNedYaw*>(
               &_PositionNedYaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(PositionNedYaw& a, PositionNedYaw& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionNedYaw* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionNedYaw* New() const final {
    return CreateMaybeMessage<PositionNedYaw>(nullptr);
  }

  PositionNedYaw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionNedYaw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionNedYaw& from);
  void MergeFrom(const PositionNedYaw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionNedYaw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.PositionNedYaw";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNorthMFieldNumber = 1,
    kEastMFieldNumber = 2,
    kDownMFieldNumber = 3,
    kYawDegFieldNumber = 4,
  };
  // float north_m = 1;
  void clear_north_m();
  float north_m() const;
  void set_north_m(float value);
  private:
  float _internal_north_m() const;
  void _internal_set_north_m(float value);
  public:

  // float east_m = 2;
  void clear_east_m();
  float east_m() const;
  void set_east_m(float value);
  private:
  float _internal_east_m() const;
  void _internal_set_east_m(float value);
  public:

  // float down_m = 3;
  void clear_down_m();
  float down_m() const;
  void set_down_m(float value);
  private:
  float _internal_down_m() const;
  void _internal_set_down_m(float value);
  public:

  // float yaw_deg = 4;
  void clear_yaw_deg();
  float yaw_deg() const;
  void set_yaw_deg(float value);
  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.PositionNedYaw)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float north_m_;
  float east_m_;
  float down_m_;
  float yaw_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class PositionGlobalYaw :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.PositionGlobalYaw) */ {
 public:
  PositionGlobalYaw();
  virtual ~PositionGlobalYaw();

  PositionGlobalYaw(const PositionGlobalYaw& from);
  PositionGlobalYaw(PositionGlobalYaw&& from) noexcept
    : PositionGlobalYaw() {
    *this = ::std::move(from);
  }

  inline PositionGlobalYaw& operator=(const PositionGlobalYaw& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionGlobalYaw& operator=(PositionGlobalYaw&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionGlobalYaw& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionGlobalYaw* internal_default_instance() {
    return reinterpret_cast<const PositionGlobalYaw*>(
               &_PositionGlobalYaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(PositionGlobalYaw& a, PositionGlobalYaw& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionGlobalYaw* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionGlobalYaw* New() const final {
    return CreateMaybeMessage<PositionGlobalYaw>(nullptr);
  }

  PositionGlobalYaw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionGlobalYaw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionGlobalYaw& from);
  void MergeFrom(const PositionGlobalYaw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionGlobalYaw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.PositionGlobalYaw";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLonFieldNumber = 2,
    kAltFieldNumber = 3,
    kYawDegFieldNumber = 4,
  };
  // float lat = 1;
  void clear_lat();
  float lat() const;
  void set_lat(float value);
  private:
  float _internal_lat() const;
  void _internal_set_lat(float value);
  public:

  // float lon = 2;
  void clear_lon();
  float lon() const;
  void set_lon(float value);
  private:
  float _internal_lon() const;
  void _internal_set_lon(float value);
  public:

  // float alt = 3;
  void clear_alt();
  float alt() const;
  void set_alt(float value);
  private:
  float _internal_alt() const;
  void _internal_set_alt(float value);
  public:

  // float yaw_deg = 4;
  void clear_yaw_deg();
  float yaw_deg() const;
  void set_yaw_deg(float value);
  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.PositionGlobalYaw)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float lat_;
  float lon_;
  float alt_;
  float yaw_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class VelocityBodyYawspeed :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.VelocityBodyYawspeed) */ {
 public:
  VelocityBodyYawspeed();
  virtual ~VelocityBodyYawspeed();

  VelocityBodyYawspeed(const VelocityBodyYawspeed& from);
  VelocityBodyYawspeed(VelocityBodyYawspeed&& from) noexcept
    : VelocityBodyYawspeed() {
    *this = ::std::move(from);
  }

  inline VelocityBodyYawspeed& operator=(const VelocityBodyYawspeed& from) {
    CopyFrom(from);
    return *this;
  }
  inline VelocityBodyYawspeed& operator=(VelocityBodyYawspeed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VelocityBodyYawspeed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VelocityBodyYawspeed* internal_default_instance() {
    return reinterpret_cast<const VelocityBodyYawspeed*>(
               &_VelocityBodyYawspeed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(VelocityBodyYawspeed& a, VelocityBodyYawspeed& b) {
    a.Swap(&b);
  }
  inline void Swap(VelocityBodyYawspeed* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VelocityBodyYawspeed* New() const final {
    return CreateMaybeMessage<VelocityBodyYawspeed>(nullptr);
  }

  VelocityBodyYawspeed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VelocityBodyYawspeed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VelocityBodyYawspeed& from);
  void MergeFrom(const VelocityBodyYawspeed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VelocityBodyYawspeed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.VelocityBodyYawspeed";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForwardMSFieldNumber = 1,
    kRightMSFieldNumber = 2,
    kDownMSFieldNumber = 3,
    kYawspeedDegSFieldNumber = 4,
  };
  // float forward_m_s = 1;
  void clear_forward_m_s();
  float forward_m_s() const;
  void set_forward_m_s(float value);
  private:
  float _internal_forward_m_s() const;
  void _internal_set_forward_m_s(float value);
  public:

  // float right_m_s = 2;
  void clear_right_m_s();
  float right_m_s() const;
  void set_right_m_s(float value);
  private:
  float _internal_right_m_s() const;
  void _internal_set_right_m_s(float value);
  public:

  // float down_m_s = 3;
  void clear_down_m_s();
  float down_m_s() const;
  void set_down_m_s(float value);
  private:
  float _internal_down_m_s() const;
  void _internal_set_down_m_s(float value);
  public:

  // float yawspeed_deg_s = 4;
  void clear_yawspeed_deg_s();
  float yawspeed_deg_s() const;
  void set_yawspeed_deg_s(float value);
  private:
  float _internal_yawspeed_deg_s() const;
  void _internal_set_yawspeed_deg_s(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.VelocityBodyYawspeed)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float forward_m_s_;
  float right_m_s_;
  float down_m_s_;
  float yawspeed_deg_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class VelocityNedYaw :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.VelocityNedYaw) */ {
 public:
  VelocityNedYaw();
  virtual ~VelocityNedYaw();

  VelocityNedYaw(const VelocityNedYaw& from);
  VelocityNedYaw(VelocityNedYaw&& from) noexcept
    : VelocityNedYaw() {
    *this = ::std::move(from);
  }

  inline VelocityNedYaw& operator=(const VelocityNedYaw& from) {
    CopyFrom(from);
    return *this;
  }
  inline VelocityNedYaw& operator=(VelocityNedYaw&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VelocityNedYaw& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VelocityNedYaw* internal_default_instance() {
    return reinterpret_cast<const VelocityNedYaw*>(
               &_VelocityNedYaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(VelocityNedYaw& a, VelocityNedYaw& b) {
    a.Swap(&b);
  }
  inline void Swap(VelocityNedYaw* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VelocityNedYaw* New() const final {
    return CreateMaybeMessage<VelocityNedYaw>(nullptr);
  }

  VelocityNedYaw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VelocityNedYaw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VelocityNedYaw& from);
  void MergeFrom(const VelocityNedYaw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VelocityNedYaw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.VelocityNedYaw";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNorthMSFieldNumber = 1,
    kEastMSFieldNumber = 2,
    kDownMSFieldNumber = 3,
    kYawDegFieldNumber = 4,
  };
  // float north_m_s = 1;
  void clear_north_m_s();
  float north_m_s() const;
  void set_north_m_s(float value);
  private:
  float _internal_north_m_s() const;
  void _internal_set_north_m_s(float value);
  public:

  // float east_m_s = 2;
  void clear_east_m_s();
  float east_m_s() const;
  void set_east_m_s(float value);
  private:
  float _internal_east_m_s() const;
  void _internal_set_east_m_s(float value);
  public:

  // float down_m_s = 3;
  void clear_down_m_s();
  float down_m_s() const;
  void set_down_m_s(float value);
  private:
  float _internal_down_m_s() const;
  void _internal_set_down_m_s(float value);
  public:

  // float yaw_deg = 4;
  void clear_yaw_deg();
  float yaw_deg() const;
  void set_yaw_deg(float value);
  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.VelocityNedYaw)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float north_m_s_;
  float east_m_s_;
  float down_m_s_;
  float yaw_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class VelocityGlobalYaw :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.VelocityGlobalYaw) */ {
 public:
  VelocityGlobalYaw();
  virtual ~VelocityGlobalYaw();

  VelocityGlobalYaw(const VelocityGlobalYaw& from);
  VelocityGlobalYaw(VelocityGlobalYaw&& from) noexcept
    : VelocityGlobalYaw() {
    *this = ::std::move(from);
  }

  inline VelocityGlobalYaw& operator=(const VelocityGlobalYaw& from) {
    CopyFrom(from);
    return *this;
  }
  inline VelocityGlobalYaw& operator=(VelocityGlobalYaw&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VelocityGlobalYaw& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VelocityGlobalYaw* internal_default_instance() {
    return reinterpret_cast<const VelocityGlobalYaw*>(
               &_VelocityGlobalYaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(VelocityGlobalYaw& a, VelocityGlobalYaw& b) {
    a.Swap(&b);
  }
  inline void Swap(VelocityGlobalYaw* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VelocityGlobalYaw* New() const final {
    return CreateMaybeMessage<VelocityGlobalYaw>(nullptr);
  }

  VelocityGlobalYaw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VelocityGlobalYaw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VelocityGlobalYaw& from);
  void MergeFrom(const VelocityGlobalYaw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VelocityGlobalYaw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.VelocityGlobalYaw";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNorthMSFieldNumber = 1,
    kEastMSFieldNumber = 2,
    kDownMSFieldNumber = 3,
    kYawDegFieldNumber = 4,
  };
  // float north_m_s = 1;
  void clear_north_m_s();
  float north_m_s() const;
  void set_north_m_s(float value);
  private:
  float _internal_north_m_s() const;
  void _internal_set_north_m_s(float value);
  public:

  // float east_m_s = 2;
  void clear_east_m_s();
  float east_m_s() const;
  void set_east_m_s(float value);
  private:
  float _internal_east_m_s() const;
  void _internal_set_east_m_s(float value);
  public:

  // float down_m_s = 3;
  void clear_down_m_s();
  float down_m_s() const;
  void set_down_m_s(float value);
  private:
  float _internal_down_m_s() const;
  void _internal_set_down_m_s(float value);
  public:

  // float yaw_deg = 4;
  void clear_yaw_deg();
  float yaw_deg() const;
  void set_yaw_deg(float value);
  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.VelocityGlobalYaw)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float north_m_s_;
  float east_m_s_;
  float down_m_s_;
  float yaw_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// -------------------------------------------------------------------

class OffboardResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.offboard.OffboardResult) */ {
 public:
  OffboardResult();
  virtual ~OffboardResult();

  OffboardResult(const OffboardResult& from);
  OffboardResult(OffboardResult&& from) noexcept
    : OffboardResult() {
    *this = ::std::move(from);
  }

  inline OffboardResult& operator=(const OffboardResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline OffboardResult& operator=(OffboardResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OffboardResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OffboardResult* internal_default_instance() {
    return reinterpret_cast<const OffboardResult*>(
               &_OffboardResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(OffboardResult& a, OffboardResult& b) {
    a.Swap(&b);
  }
  inline void Swap(OffboardResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OffboardResult* New() const final {
    return CreateMaybeMessage<OffboardResult>(nullptr);
  }

  OffboardResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OffboardResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OffboardResult& from);
  void MergeFrom(const OffboardResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OffboardResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.offboard.OffboardResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offboard_2foffboard_2eproto);
    return ::descriptor_table_offboard_2foffboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef OffboardResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    OffboardResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    OffboardResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NO_SYSTEM =
    OffboardResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR =
    OffboardResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_BUSY =
    OffboardResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_COMMAND_DENIED =
    OffboardResult_Result_RESULT_COMMAND_DENIED;
  static constexpr Result RESULT_TIMEOUT =
    OffboardResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_NO_SETPOINT_SET =
    OffboardResult_Result_RESULT_NO_SETPOINT_SET;
  static inline bool Result_IsValid(int value) {
    return OffboardResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    OffboardResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    OffboardResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    OffboardResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return OffboardResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return OffboardResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(const std::string& name,
      Result* value) {
    return OffboardResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  void set_result_str(const std::string& value);
  void set_result_str(std::string&& value);
  void set_result_str(const char* value);
  void set_result_str(const char* value, size_t size);
  std::string* mutable_result_str();
  std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.offboard.OffboardResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::offboard::OffboardResult_Result result() const;
  void set_result(::mavsdk::rpc::offboard::OffboardResult_Result value);
  private:
  ::mavsdk::rpc::offboard::OffboardResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::offboard::OffboardResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.offboard.OffboardResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offboard_2foffboard_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StartRequest

// -------------------------------------------------------------------

// StartResponse

// .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
inline bool StartResponse::_internal_has_offboard_result() const {
  return this != internal_default_instance() && offboard_result_ != nullptr;
}
inline bool StartResponse::has_offboard_result() const {
  return _internal_has_offboard_result();
}
inline void StartResponse::clear_offboard_result() {
  if (GetArenaNoVirtual() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::OffboardResult& StartResponse::_internal_offboard_result() const {
  const ::mavsdk::rpc::offboard::OffboardResult* p = offboard_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::offboard::OffboardResult*>(
      &::mavsdk::rpc::offboard::_OffboardResult_default_instance_);
}
inline const ::mavsdk::rpc::offboard::OffboardResult& StartResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.StartResponse.offboard_result)
  return _internal_offboard_result();
}
inline ::mavsdk::rpc::offboard::OffboardResult* StartResponse::release_offboard_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.StartResponse.offboard_result)
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* StartResponse::_internal_mutable_offboard_result() {
  
  if (offboard_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(GetArenaNoVirtual());
    offboard_result_ = p;
  }
  return offboard_result_;
}
inline ::mavsdk::rpc::offboard::OffboardResult* StartResponse::mutable_offboard_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.StartResponse.offboard_result)
  return _internal_mutable_offboard_result();
}
inline void StartResponse::set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete offboard_result_;
  }
  if (offboard_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offboard_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offboard_result, submessage_arena);
    }
    
  } else {
    
  }
  offboard_result_ = offboard_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.StartResponse.offboard_result)
}

// -------------------------------------------------------------------

// StopRequest

// -------------------------------------------------------------------

// StopResponse

// .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
inline bool StopResponse::_internal_has_offboard_result() const {
  return this != internal_default_instance() && offboard_result_ != nullptr;
}
inline bool StopResponse::has_offboard_result() const {
  return _internal_has_offboard_result();
}
inline void StopResponse::clear_offboard_result() {
  if (GetArenaNoVirtual() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::OffboardResult& StopResponse::_internal_offboard_result() const {
  const ::mavsdk::rpc::offboard::OffboardResult* p = offboard_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::offboard::OffboardResult*>(
      &::mavsdk::rpc::offboard::_OffboardResult_default_instance_);
}
inline const ::mavsdk::rpc::offboard::OffboardResult& StopResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.StopResponse.offboard_result)
  return _internal_offboard_result();
}
inline ::mavsdk::rpc::offboard::OffboardResult* StopResponse::release_offboard_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.StopResponse.offboard_result)
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* StopResponse::_internal_mutable_offboard_result() {
  
  if (offboard_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(GetArenaNoVirtual());
    offboard_result_ = p;
  }
  return offboard_result_;
}
inline ::mavsdk::rpc::offboard::OffboardResult* StopResponse::mutable_offboard_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.StopResponse.offboard_result)
  return _internal_mutable_offboard_result();
}
inline void StopResponse::set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete offboard_result_;
  }
  if (offboard_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offboard_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offboard_result, submessage_arena);
    }
    
  } else {
    
  }
  offboard_result_ = offboard_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.StopResponse.offboard_result)
}

// -------------------------------------------------------------------

// IsActiveRequest

// -------------------------------------------------------------------

// IsActiveResponse

// bool is_active = 1;
inline void IsActiveResponse::clear_is_active() {
  is_active_ = false;
}
inline bool IsActiveResponse::_internal_is_active() const {
  return is_active_;
}
inline bool IsActiveResponse::is_active() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.IsActiveResponse.is_active)
  return _internal_is_active();
}
inline void IsActiveResponse::_internal_set_is_active(bool value) {
  
  is_active_ = value;
}
inline void IsActiveResponse::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.IsActiveResponse.is_active)
}

// -------------------------------------------------------------------

// SetAttitudeRequest

// .mavsdk.rpc.offboard.Attitude attitude = 1;
inline bool SetAttitudeRequest::_internal_has_attitude() const {
  return this != internal_default_instance() && attitude_ != nullptr;
}
inline bool SetAttitudeRequest::has_attitude() const {
  return _internal_has_attitude();
}
inline void SetAttitudeRequest::clear_attitude() {
  if (GetArenaNoVirtual() == nullptr && attitude_ != nullptr) {
    delete attitude_;
  }
  attitude_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::Attitude& SetAttitudeRequest::_internal_attitude() const {
  const ::mavsdk::rpc::offboard::Attitude* p = attitude_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::offboard::Attitude*>(
      &::mavsdk::rpc::offboard::_Attitude_default_instance_);
}
inline const ::mavsdk::rpc::offboard::Attitude& SetAttitudeRequest::attitude() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetAttitudeRequest.attitude)
  return _internal_attitude();
}
inline ::mavsdk::rpc::offboard::Attitude* SetAttitudeRequest::release_attitude() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetAttitudeRequest.attitude)
  
  ::mavsdk::rpc::offboard::Attitude* temp = attitude_;
  attitude_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::Attitude* SetAttitudeRequest::_internal_mutable_attitude() {
  
  if (attitude_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::Attitude>(GetArenaNoVirtual());
    attitude_ = p;
  }
  return attitude_;
}
inline ::mavsdk::rpc::offboard::Attitude* SetAttitudeRequest::mutable_attitude() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetAttitudeRequest.attitude)
  return _internal_mutable_attitude();
}
inline void SetAttitudeRequest::set_allocated_attitude(::mavsdk::rpc::offboard::Attitude* attitude) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attitude_;
  }
  if (attitude) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attitude = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude, submessage_arena);
    }
    
  } else {
    
  }
  attitude_ = attitude;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetAttitudeRequest.attitude)
}

// -------------------------------------------------------------------

// SetAttitudeResponse

// .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
inline bool SetAttitudeResponse::_internal_has_offboard_result() const {
  return this != internal_default_instance() && offboard_result_ != nullptr;
}
inline bool SetAttitudeResponse::has_offboard_result() const {
  return _internal_has_offboard_result();
}
inline void SetAttitudeResponse::clear_offboard_result() {
  if (GetArenaNoVirtual() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetAttitudeResponse::_internal_offboard_result() const {
  const ::mavsdk::rpc::offboard::OffboardResult* p = offboard_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::offboard::OffboardResult*>(
      &::mavsdk::rpc::offboard::_OffboardResult_default_instance_);
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetAttitudeResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetAttitudeResponse.offboard_result)
  return _internal_offboard_result();
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetAttitudeResponse::release_offboard_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetAttitudeResponse.offboard_result)
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetAttitudeResponse::_internal_mutable_offboard_result() {
  
  if (offboard_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(GetArenaNoVirtual());
    offboard_result_ = p;
  }
  return offboard_result_;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetAttitudeResponse::mutable_offboard_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetAttitudeResponse.offboard_result)
  return _internal_mutable_offboard_result();
}
inline void SetAttitudeResponse::set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete offboard_result_;
  }
  if (offboard_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offboard_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offboard_result, submessage_arena);
    }
    
  } else {
    
  }
  offboard_result_ = offboard_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetAttitudeResponse.offboard_result)
}

// -------------------------------------------------------------------

// SetActuatorControlRequest

// .mavsdk.rpc.offboard.ActuatorControl actuator_control = 1;
inline bool SetActuatorControlRequest::_internal_has_actuator_control() const {
  return this != internal_default_instance() && actuator_control_ != nullptr;
}
inline bool SetActuatorControlRequest::has_actuator_control() const {
  return _internal_has_actuator_control();
}
inline void SetActuatorControlRequest::clear_actuator_control() {
  if (GetArenaNoVirtual() == nullptr && actuator_control_ != nullptr) {
    delete actuator_control_;
  }
  actuator_control_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::ActuatorControl& SetActuatorControlRequest::_internal_actuator_control() const {
  const ::mavsdk::rpc::offboard::ActuatorControl* p = actuator_control_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::offboard::ActuatorControl*>(
      &::mavsdk::rpc::offboard::_ActuatorControl_default_instance_);
}
inline const ::mavsdk::rpc::offboard::ActuatorControl& SetActuatorControlRequest::actuator_control() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetActuatorControlRequest.actuator_control)
  return _internal_actuator_control();
}
inline ::mavsdk::rpc::offboard::ActuatorControl* SetActuatorControlRequest::release_actuator_control() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetActuatorControlRequest.actuator_control)
  
  ::mavsdk::rpc::offboard::ActuatorControl* temp = actuator_control_;
  actuator_control_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::ActuatorControl* SetActuatorControlRequest::_internal_mutable_actuator_control() {
  
  if (actuator_control_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::ActuatorControl>(GetArenaNoVirtual());
    actuator_control_ = p;
  }
  return actuator_control_;
}
inline ::mavsdk::rpc::offboard::ActuatorControl* SetActuatorControlRequest::mutable_actuator_control() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetActuatorControlRequest.actuator_control)
  return _internal_mutable_actuator_control();
}
inline void SetActuatorControlRequest::set_allocated_actuator_control(::mavsdk::rpc::offboard::ActuatorControl* actuator_control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete actuator_control_;
  }
  if (actuator_control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      actuator_control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actuator_control, submessage_arena);
    }
    
  } else {
    
  }
  actuator_control_ = actuator_control;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetActuatorControlRequest.actuator_control)
}

// -------------------------------------------------------------------

// SetActuatorControlResponse

// .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
inline bool SetActuatorControlResponse::_internal_has_offboard_result() const {
  return this != internal_default_instance() && offboard_result_ != nullptr;
}
inline bool SetActuatorControlResponse::has_offboard_result() const {
  return _internal_has_offboard_result();
}
inline void SetActuatorControlResponse::clear_offboard_result() {
  if (GetArenaNoVirtual() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetActuatorControlResponse::_internal_offboard_result() const {
  const ::mavsdk::rpc::offboard::OffboardResult* p = offboard_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::offboard::OffboardResult*>(
      &::mavsdk::rpc::offboard::_OffboardResult_default_instance_);
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetActuatorControlResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetActuatorControlResponse.offboard_result)
  return _internal_offboard_result();
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetActuatorControlResponse::release_offboard_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetActuatorControlResponse.offboard_result)
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetActuatorControlResponse::_internal_mutable_offboard_result() {
  
  if (offboard_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(GetArenaNoVirtual());
    offboard_result_ = p;
  }
  return offboard_result_;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetActuatorControlResponse::mutable_offboard_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetActuatorControlResponse.offboard_result)
  return _internal_mutable_offboard_result();
}
inline void SetActuatorControlResponse::set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete offboard_result_;
  }
  if (offboard_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offboard_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offboard_result, submessage_arena);
    }
    
  } else {
    
  }
  offboard_result_ = offboard_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetActuatorControlResponse.offboard_result)
}

// -------------------------------------------------------------------

// SetAttitudeRateRequest

// .mavsdk.rpc.offboard.AttitudeRate attitude_rate = 1;
inline bool SetAttitudeRateRequest::_internal_has_attitude_rate() const {
  return this != internal_default_instance() && attitude_rate_ != nullptr;
}
inline bool SetAttitudeRateRequest::has_attitude_rate() const {
  return _internal_has_attitude_rate();
}
inline void SetAttitudeRateRequest::clear_attitude_rate() {
  if (GetArenaNoVirtual() == nullptr && attitude_rate_ != nullptr) {
    delete attitude_rate_;
  }
  attitude_rate_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::AttitudeRate& SetAttitudeRateRequest::_internal_attitude_rate() const {
  const ::mavsdk::rpc::offboard::AttitudeRate* p = attitude_rate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::offboard::AttitudeRate*>(
      &::mavsdk::rpc::offboard::_AttitudeRate_default_instance_);
}
inline const ::mavsdk::rpc::offboard::AttitudeRate& SetAttitudeRateRequest::attitude_rate() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetAttitudeRateRequest.attitude_rate)
  return _internal_attitude_rate();
}
inline ::mavsdk::rpc::offboard::AttitudeRate* SetAttitudeRateRequest::release_attitude_rate() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetAttitudeRateRequest.attitude_rate)
  
  ::mavsdk::rpc::offboard::AttitudeRate* temp = attitude_rate_;
  attitude_rate_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::AttitudeRate* SetAttitudeRateRequest::_internal_mutable_attitude_rate() {
  
  if (attitude_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::AttitudeRate>(GetArenaNoVirtual());
    attitude_rate_ = p;
  }
  return attitude_rate_;
}
inline ::mavsdk::rpc::offboard::AttitudeRate* SetAttitudeRateRequest::mutable_attitude_rate() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetAttitudeRateRequest.attitude_rate)
  return _internal_mutable_attitude_rate();
}
inline void SetAttitudeRateRequest::set_allocated_attitude_rate(::mavsdk::rpc::offboard::AttitudeRate* attitude_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attitude_rate_;
  }
  if (attitude_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attitude_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude_rate, submessage_arena);
    }
    
  } else {
    
  }
  attitude_rate_ = attitude_rate;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetAttitudeRateRequest.attitude_rate)
}

// -------------------------------------------------------------------

// SetAttitudeRateResponse

// .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
inline bool SetAttitudeRateResponse::_internal_has_offboard_result() const {
  return this != internal_default_instance() && offboard_result_ != nullptr;
}
inline bool SetAttitudeRateResponse::has_offboard_result() const {
  return _internal_has_offboard_result();
}
inline void SetAttitudeRateResponse::clear_offboard_result() {
  if (GetArenaNoVirtual() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetAttitudeRateResponse::_internal_offboard_result() const {
  const ::mavsdk::rpc::offboard::OffboardResult* p = offboard_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::offboard::OffboardResult*>(
      &::mavsdk::rpc::offboard::_OffboardResult_default_instance_);
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetAttitudeRateResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetAttitudeRateResponse.offboard_result)
  return _internal_offboard_result();
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetAttitudeRateResponse::release_offboard_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetAttitudeRateResponse.offboard_result)
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetAttitudeRateResponse::_internal_mutable_offboard_result() {
  
  if (offboard_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(GetArenaNoVirtual());
    offboard_result_ = p;
  }
  return offboard_result_;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetAttitudeRateResponse::mutable_offboard_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetAttitudeRateResponse.offboard_result)
  return _internal_mutable_offboard_result();
}
inline void SetAttitudeRateResponse::set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete offboard_result_;
  }
  if (offboard_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offboard_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offboard_result, submessage_arena);
    }
    
  } else {
    
  }
  offboard_result_ = offboard_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetAttitudeRateResponse.offboard_result)
}

// -------------------------------------------------------------------

// SetPositionNedRequest

// .mavsdk.rpc.offboard.PositionNedYaw position_ned_yaw = 1;
inline bool SetPositionNedRequest::_internal_has_position_ned_yaw() const {
  return this != internal_default_instance() && position_ned_yaw_ != nullptr;
}
inline bool SetPositionNedRequest::has_position_ned_yaw() const {
  return _internal_has_position_ned_yaw();
}
inline void SetPositionNedRequest::clear_position_ned_yaw() {
  if (GetArenaNoVirtual() == nullptr && position_ned_yaw_ != nullptr) {
    delete position_ned_yaw_;
  }
  position_ned_yaw_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::PositionNedYaw& SetPositionNedRequest::_internal_position_ned_yaw() const {
  const ::mavsdk::rpc::offboard::PositionNedYaw* p = position_ned_yaw_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::offboard::PositionNedYaw*>(
      &::mavsdk::rpc::offboard::_PositionNedYaw_default_instance_);
}
inline const ::mavsdk::rpc::offboard::PositionNedYaw& SetPositionNedRequest::position_ned_yaw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetPositionNedRequest.position_ned_yaw)
  return _internal_position_ned_yaw();
}
inline ::mavsdk::rpc::offboard::PositionNedYaw* SetPositionNedRequest::release_position_ned_yaw() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetPositionNedRequest.position_ned_yaw)
  
  ::mavsdk::rpc::offboard::PositionNedYaw* temp = position_ned_yaw_;
  position_ned_yaw_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::PositionNedYaw* SetPositionNedRequest::_internal_mutable_position_ned_yaw() {
  
  if (position_ned_yaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::PositionNedYaw>(GetArenaNoVirtual());
    position_ned_yaw_ = p;
  }
  return position_ned_yaw_;
}
inline ::mavsdk::rpc::offboard::PositionNedYaw* SetPositionNedRequest::mutable_position_ned_yaw() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetPositionNedRequest.position_ned_yaw)
  return _internal_mutable_position_ned_yaw();
}
inline void SetPositionNedRequest::set_allocated_position_ned_yaw(::mavsdk::rpc::offboard::PositionNedYaw* position_ned_yaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_ned_yaw_;
  }
  if (position_ned_yaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position_ned_yaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_ned_yaw, submessage_arena);
    }
    
  } else {
    
  }
  position_ned_yaw_ = position_ned_yaw;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetPositionNedRequest.position_ned_yaw)
}

// -------------------------------------------------------------------

// SetPositionNedResponse

// .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
inline bool SetPositionNedResponse::_internal_has_offboard_result() const {
  return this != internal_default_instance() && offboard_result_ != nullptr;
}
inline bool SetPositionNedResponse::has_offboard_result() const {
  return _internal_has_offboard_result();
}
inline void SetPositionNedResponse::clear_offboard_result() {
  if (GetArenaNoVirtual() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetPositionNedResponse::_internal_offboard_result() const {
  const ::mavsdk::rpc::offboard::OffboardResult* p = offboard_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::offboard::OffboardResult*>(
      &::mavsdk::rpc::offboard::_OffboardResult_default_instance_);
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetPositionNedResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetPositionNedResponse.offboard_result)
  return _internal_offboard_result();
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetPositionNedResponse::release_offboard_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetPositionNedResponse.offboard_result)
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetPositionNedResponse::_internal_mutable_offboard_result() {
  
  if (offboard_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(GetArenaNoVirtual());
    offboard_result_ = p;
  }
  return offboard_result_;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetPositionNedResponse::mutable_offboard_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetPositionNedResponse.offboard_result)
  return _internal_mutable_offboard_result();
}
inline void SetPositionNedResponse::set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete offboard_result_;
  }
  if (offboard_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offboard_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offboard_result, submessage_arena);
    }
    
  } else {
    
  }
  offboard_result_ = offboard_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetPositionNedResponse.offboard_result)
}

// -------------------------------------------------------------------

// SetPositionGlobalRequest

// .mavsdk.rpc.offboard.PositionGlobalYaw position_global_yaw = 1;
inline bool SetPositionGlobalRequest::_internal_has_position_global_yaw() const {
  return this != internal_default_instance() && position_global_yaw_ != nullptr;
}
inline bool SetPositionGlobalRequest::has_position_global_yaw() const {
  return _internal_has_position_global_yaw();
}
inline void SetPositionGlobalRequest::clear_position_global_yaw() {
  if (GetArenaNoVirtual() == nullptr && position_global_yaw_ != nullptr) {
    delete position_global_yaw_;
  }
  position_global_yaw_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::PositionGlobalYaw& SetPositionGlobalRequest::_internal_position_global_yaw() const {
  const ::mavsdk::rpc::offboard::PositionGlobalYaw* p = position_global_yaw_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::offboard::PositionGlobalYaw*>(
      &::mavsdk::rpc::offboard::_PositionGlobalYaw_default_instance_);
}
inline const ::mavsdk::rpc::offboard::PositionGlobalYaw& SetPositionGlobalRequest::position_global_yaw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetPositionGlobalRequest.position_global_yaw)
  return _internal_position_global_yaw();
}
inline ::mavsdk::rpc::offboard::PositionGlobalYaw* SetPositionGlobalRequest::release_position_global_yaw() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetPositionGlobalRequest.position_global_yaw)
  
  ::mavsdk::rpc::offboard::PositionGlobalYaw* temp = position_global_yaw_;
  position_global_yaw_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::PositionGlobalYaw* SetPositionGlobalRequest::_internal_mutable_position_global_yaw() {
  
  if (position_global_yaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::PositionGlobalYaw>(GetArenaNoVirtual());
    position_global_yaw_ = p;
  }
  return position_global_yaw_;
}
inline ::mavsdk::rpc::offboard::PositionGlobalYaw* SetPositionGlobalRequest::mutable_position_global_yaw() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetPositionGlobalRequest.position_global_yaw)
  return _internal_mutable_position_global_yaw();
}
inline void SetPositionGlobalRequest::set_allocated_position_global_yaw(::mavsdk::rpc::offboard::PositionGlobalYaw* position_global_yaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_global_yaw_;
  }
  if (position_global_yaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position_global_yaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_global_yaw, submessage_arena);
    }
    
  } else {
    
  }
  position_global_yaw_ = position_global_yaw;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetPositionGlobalRequest.position_global_yaw)
}

// -------------------------------------------------------------------

// SetPositionGlobalResponse

// .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
inline bool SetPositionGlobalResponse::_internal_has_offboard_result() const {
  return this != internal_default_instance() && offboard_result_ != nullptr;
}
inline bool SetPositionGlobalResponse::has_offboard_result() const {
  return _internal_has_offboard_result();
}
inline void SetPositionGlobalResponse::clear_offboard_result() {
  if (GetArenaNoVirtual() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetPositionGlobalResponse::_internal_offboard_result() const {
  const ::mavsdk::rpc::offboard::OffboardResult* p = offboard_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::offboard::OffboardResult*>(
      &::mavsdk::rpc::offboard::_OffboardResult_default_instance_);
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetPositionGlobalResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetPositionGlobalResponse.offboard_result)
  return _internal_offboard_result();
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetPositionGlobalResponse::release_offboard_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetPositionGlobalResponse.offboard_result)
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetPositionGlobalResponse::_internal_mutable_offboard_result() {
  
  if (offboard_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(GetArenaNoVirtual());
    offboard_result_ = p;
  }
  return offboard_result_;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetPositionGlobalResponse::mutable_offboard_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetPositionGlobalResponse.offboard_result)
  return _internal_mutable_offboard_result();
}
inline void SetPositionGlobalResponse::set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete offboard_result_;
  }
  if (offboard_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offboard_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offboard_result, submessage_arena);
    }
    
  } else {
    
  }
  offboard_result_ = offboard_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetPositionGlobalResponse.offboard_result)
}

// -------------------------------------------------------------------

// SetVelocityBodyRequest

// .mavsdk.rpc.offboard.VelocityBodyYawspeed velocity_body_yawspeed = 1;
inline bool SetVelocityBodyRequest::_internal_has_velocity_body_yawspeed() const {
  return this != internal_default_instance() && velocity_body_yawspeed_ != nullptr;
}
inline bool SetVelocityBodyRequest::has_velocity_body_yawspeed() const {
  return _internal_has_velocity_body_yawspeed();
}
inline void SetVelocityBodyRequest::clear_velocity_body_yawspeed() {
  if (GetArenaNoVirtual() == nullptr && velocity_body_yawspeed_ != nullptr) {
    delete velocity_body_yawspeed_;
  }
  velocity_body_yawspeed_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::VelocityBodyYawspeed& SetVelocityBodyRequest::_internal_velocity_body_yawspeed() const {
  const ::mavsdk::rpc::offboard::VelocityBodyYawspeed* p = velocity_body_yawspeed_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::offboard::VelocityBodyYawspeed*>(
      &::mavsdk::rpc::offboard::_VelocityBodyYawspeed_default_instance_);
}
inline const ::mavsdk::rpc::offboard::VelocityBodyYawspeed& SetVelocityBodyRequest::velocity_body_yawspeed() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetVelocityBodyRequest.velocity_body_yawspeed)
  return _internal_velocity_body_yawspeed();
}
inline ::mavsdk::rpc::offboard::VelocityBodyYawspeed* SetVelocityBodyRequest::release_velocity_body_yawspeed() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetVelocityBodyRequest.velocity_body_yawspeed)
  
  ::mavsdk::rpc::offboard::VelocityBodyYawspeed* temp = velocity_body_yawspeed_;
  velocity_body_yawspeed_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::VelocityBodyYawspeed* SetVelocityBodyRequest::_internal_mutable_velocity_body_yawspeed() {
  
  if (velocity_body_yawspeed_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::VelocityBodyYawspeed>(GetArenaNoVirtual());
    velocity_body_yawspeed_ = p;
  }
  return velocity_body_yawspeed_;
}
inline ::mavsdk::rpc::offboard::VelocityBodyYawspeed* SetVelocityBodyRequest::mutable_velocity_body_yawspeed() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetVelocityBodyRequest.velocity_body_yawspeed)
  return _internal_mutable_velocity_body_yawspeed();
}
inline void SetVelocityBodyRequest::set_allocated_velocity_body_yawspeed(::mavsdk::rpc::offboard::VelocityBodyYawspeed* velocity_body_yawspeed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete velocity_body_yawspeed_;
  }
  if (velocity_body_yawspeed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity_body_yawspeed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_body_yawspeed, submessage_arena);
    }
    
  } else {
    
  }
  velocity_body_yawspeed_ = velocity_body_yawspeed;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetVelocityBodyRequest.velocity_body_yawspeed)
}

// -------------------------------------------------------------------

// SetVelocityBodyResponse

// .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
inline bool SetVelocityBodyResponse::_internal_has_offboard_result() const {
  return this != internal_default_instance() && offboard_result_ != nullptr;
}
inline bool SetVelocityBodyResponse::has_offboard_result() const {
  return _internal_has_offboard_result();
}
inline void SetVelocityBodyResponse::clear_offboard_result() {
  if (GetArenaNoVirtual() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetVelocityBodyResponse::_internal_offboard_result() const {
  const ::mavsdk::rpc::offboard::OffboardResult* p = offboard_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::offboard::OffboardResult*>(
      &::mavsdk::rpc::offboard::_OffboardResult_default_instance_);
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetVelocityBodyResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetVelocityBodyResponse.offboard_result)
  return _internal_offboard_result();
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetVelocityBodyResponse::release_offboard_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetVelocityBodyResponse.offboard_result)
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetVelocityBodyResponse::_internal_mutable_offboard_result() {
  
  if (offboard_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(GetArenaNoVirtual());
    offboard_result_ = p;
  }
  return offboard_result_;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetVelocityBodyResponse::mutable_offboard_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetVelocityBodyResponse.offboard_result)
  return _internal_mutable_offboard_result();
}
inline void SetVelocityBodyResponse::set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete offboard_result_;
  }
  if (offboard_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offboard_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offboard_result, submessage_arena);
    }
    
  } else {
    
  }
  offboard_result_ = offboard_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetVelocityBodyResponse.offboard_result)
}

// -------------------------------------------------------------------

// SetVelocityNedRequest

// .mavsdk.rpc.offboard.VelocityNedYaw velocity_ned_yaw = 1;
inline bool SetVelocityNedRequest::_internal_has_velocity_ned_yaw() const {
  return this != internal_default_instance() && velocity_ned_yaw_ != nullptr;
}
inline bool SetVelocityNedRequest::has_velocity_ned_yaw() const {
  return _internal_has_velocity_ned_yaw();
}
inline void SetVelocityNedRequest::clear_velocity_ned_yaw() {
  if (GetArenaNoVirtual() == nullptr && velocity_ned_yaw_ != nullptr) {
    delete velocity_ned_yaw_;
  }
  velocity_ned_yaw_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::VelocityNedYaw& SetVelocityNedRequest::_internal_velocity_ned_yaw() const {
  const ::mavsdk::rpc::offboard::VelocityNedYaw* p = velocity_ned_yaw_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::offboard::VelocityNedYaw*>(
      &::mavsdk::rpc::offboard::_VelocityNedYaw_default_instance_);
}
inline const ::mavsdk::rpc::offboard::VelocityNedYaw& SetVelocityNedRequest::velocity_ned_yaw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetVelocityNedRequest.velocity_ned_yaw)
  return _internal_velocity_ned_yaw();
}
inline ::mavsdk::rpc::offboard::VelocityNedYaw* SetVelocityNedRequest::release_velocity_ned_yaw() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetVelocityNedRequest.velocity_ned_yaw)
  
  ::mavsdk::rpc::offboard::VelocityNedYaw* temp = velocity_ned_yaw_;
  velocity_ned_yaw_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::VelocityNedYaw* SetVelocityNedRequest::_internal_mutable_velocity_ned_yaw() {
  
  if (velocity_ned_yaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::VelocityNedYaw>(GetArenaNoVirtual());
    velocity_ned_yaw_ = p;
  }
  return velocity_ned_yaw_;
}
inline ::mavsdk::rpc::offboard::VelocityNedYaw* SetVelocityNedRequest::mutable_velocity_ned_yaw() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetVelocityNedRequest.velocity_ned_yaw)
  return _internal_mutable_velocity_ned_yaw();
}
inline void SetVelocityNedRequest::set_allocated_velocity_ned_yaw(::mavsdk::rpc::offboard::VelocityNedYaw* velocity_ned_yaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete velocity_ned_yaw_;
  }
  if (velocity_ned_yaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity_ned_yaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_ned_yaw, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ned_yaw_ = velocity_ned_yaw;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetVelocityNedRequest.velocity_ned_yaw)
}

// -------------------------------------------------------------------

// SetVelocityNedResponse

// .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
inline bool SetVelocityNedResponse::_internal_has_offboard_result() const {
  return this != internal_default_instance() && offboard_result_ != nullptr;
}
inline bool SetVelocityNedResponse::has_offboard_result() const {
  return _internal_has_offboard_result();
}
inline void SetVelocityNedResponse::clear_offboard_result() {
  if (GetArenaNoVirtual() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetVelocityNedResponse::_internal_offboard_result() const {
  const ::mavsdk::rpc::offboard::OffboardResult* p = offboard_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::offboard::OffboardResult*>(
      &::mavsdk::rpc::offboard::_OffboardResult_default_instance_);
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetVelocityNedResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetVelocityNedResponse.offboard_result)
  return _internal_offboard_result();
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetVelocityNedResponse::release_offboard_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetVelocityNedResponse.offboard_result)
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetVelocityNedResponse::_internal_mutable_offboard_result() {
  
  if (offboard_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(GetArenaNoVirtual());
    offboard_result_ = p;
  }
  return offboard_result_;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetVelocityNedResponse::mutable_offboard_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetVelocityNedResponse.offboard_result)
  return _internal_mutable_offboard_result();
}
inline void SetVelocityNedResponse::set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete offboard_result_;
  }
  if (offboard_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offboard_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offboard_result, submessage_arena);
    }
    
  } else {
    
  }
  offboard_result_ = offboard_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetVelocityNedResponse.offboard_result)
}

// -------------------------------------------------------------------

// SetVelocityGlobalRequest

// .mavsdk.rpc.offboard.VelocityGlobalYaw velocity_global_yaw = 1;
inline bool SetVelocityGlobalRequest::_internal_has_velocity_global_yaw() const {
  return this != internal_default_instance() && velocity_global_yaw_ != nullptr;
}
inline bool SetVelocityGlobalRequest::has_velocity_global_yaw() const {
  return _internal_has_velocity_global_yaw();
}
inline void SetVelocityGlobalRequest::clear_velocity_global_yaw() {
  if (GetArenaNoVirtual() == nullptr && velocity_global_yaw_ != nullptr) {
    delete velocity_global_yaw_;
  }
  velocity_global_yaw_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::VelocityGlobalYaw& SetVelocityGlobalRequest::_internal_velocity_global_yaw() const {
  const ::mavsdk::rpc::offboard::VelocityGlobalYaw* p = velocity_global_yaw_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::offboard::VelocityGlobalYaw*>(
      &::mavsdk::rpc::offboard::_VelocityGlobalYaw_default_instance_);
}
inline const ::mavsdk::rpc::offboard::VelocityGlobalYaw& SetVelocityGlobalRequest::velocity_global_yaw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetVelocityGlobalRequest.velocity_global_yaw)
  return _internal_velocity_global_yaw();
}
inline ::mavsdk::rpc::offboard::VelocityGlobalYaw* SetVelocityGlobalRequest::release_velocity_global_yaw() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetVelocityGlobalRequest.velocity_global_yaw)
  
  ::mavsdk::rpc::offboard::VelocityGlobalYaw* temp = velocity_global_yaw_;
  velocity_global_yaw_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::VelocityGlobalYaw* SetVelocityGlobalRequest::_internal_mutable_velocity_global_yaw() {
  
  if (velocity_global_yaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::VelocityGlobalYaw>(GetArenaNoVirtual());
    velocity_global_yaw_ = p;
  }
  return velocity_global_yaw_;
}
inline ::mavsdk::rpc::offboard::VelocityGlobalYaw* SetVelocityGlobalRequest::mutable_velocity_global_yaw() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetVelocityGlobalRequest.velocity_global_yaw)
  return _internal_mutable_velocity_global_yaw();
}
inline void SetVelocityGlobalRequest::set_allocated_velocity_global_yaw(::mavsdk::rpc::offboard::VelocityGlobalYaw* velocity_global_yaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete velocity_global_yaw_;
  }
  if (velocity_global_yaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity_global_yaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_global_yaw, submessage_arena);
    }
    
  } else {
    
  }
  velocity_global_yaw_ = velocity_global_yaw;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetVelocityGlobalRequest.velocity_global_yaw)
}

// -------------------------------------------------------------------

// SetVelocityGlobalResponse

// .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
inline bool SetVelocityGlobalResponse::_internal_has_offboard_result() const {
  return this != internal_default_instance() && offboard_result_ != nullptr;
}
inline bool SetVelocityGlobalResponse::has_offboard_result() const {
  return _internal_has_offboard_result();
}
inline void SetVelocityGlobalResponse::clear_offboard_result() {
  if (GetArenaNoVirtual() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetVelocityGlobalResponse::_internal_offboard_result() const {
  const ::mavsdk::rpc::offboard::OffboardResult* p = offboard_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::offboard::OffboardResult*>(
      &::mavsdk::rpc::offboard::_OffboardResult_default_instance_);
}
inline const ::mavsdk::rpc::offboard::OffboardResult& SetVelocityGlobalResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.SetVelocityGlobalResponse.offboard_result)
  return _internal_offboard_result();
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetVelocityGlobalResponse::release_offboard_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.SetVelocityGlobalResponse.offboard_result)
  
  ::mavsdk::rpc::offboard::OffboardResult* temp = offboard_result_;
  offboard_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetVelocityGlobalResponse::_internal_mutable_offboard_result() {
  
  if (offboard_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::offboard::OffboardResult>(GetArenaNoVirtual());
    offboard_result_ = p;
  }
  return offboard_result_;
}
inline ::mavsdk::rpc::offboard::OffboardResult* SetVelocityGlobalResponse::mutable_offboard_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.SetVelocityGlobalResponse.offboard_result)
  return _internal_mutable_offboard_result();
}
inline void SetVelocityGlobalResponse::set_allocated_offboard_result(::mavsdk::rpc::offboard::OffboardResult* offboard_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete offboard_result_;
  }
  if (offboard_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offboard_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offboard_result, submessage_arena);
    }
    
  } else {
    
  }
  offboard_result_ = offboard_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.SetVelocityGlobalResponse.offboard_result)
}

// -------------------------------------------------------------------

// Attitude

// float roll_deg = 1;
inline void Attitude::clear_roll_deg() {
  roll_deg_ = 0;
}
inline float Attitude::_internal_roll_deg() const {
  return roll_deg_;
}
inline float Attitude::roll_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.Attitude.roll_deg)
  return _internal_roll_deg();
}
inline void Attitude::_internal_set_roll_deg(float value) {
  
  roll_deg_ = value;
}
inline void Attitude::set_roll_deg(float value) {
  _internal_set_roll_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.Attitude.roll_deg)
}

// float pitch_deg = 2;
inline void Attitude::clear_pitch_deg() {
  pitch_deg_ = 0;
}
inline float Attitude::_internal_pitch_deg() const {
  return pitch_deg_;
}
inline float Attitude::pitch_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.Attitude.pitch_deg)
  return _internal_pitch_deg();
}
inline void Attitude::_internal_set_pitch_deg(float value) {
  
  pitch_deg_ = value;
}
inline void Attitude::set_pitch_deg(float value) {
  _internal_set_pitch_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.Attitude.pitch_deg)
}

// float yaw_deg = 3;
inline void Attitude::clear_yaw_deg() {
  yaw_deg_ = 0;
}
inline float Attitude::_internal_yaw_deg() const {
  return yaw_deg_;
}
inline float Attitude::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.Attitude.yaw_deg)
  return _internal_yaw_deg();
}
inline void Attitude::_internal_set_yaw_deg(float value) {
  
  yaw_deg_ = value;
}
inline void Attitude::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.Attitude.yaw_deg)
}

// float thrust_value = 4;
inline void Attitude::clear_thrust_value() {
  thrust_value_ = 0;
}
inline float Attitude::_internal_thrust_value() const {
  return thrust_value_;
}
inline float Attitude::thrust_value() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.Attitude.thrust_value)
  return _internal_thrust_value();
}
inline void Attitude::_internal_set_thrust_value(float value) {
  
  thrust_value_ = value;
}
inline void Attitude::set_thrust_value(float value) {
  _internal_set_thrust_value(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.Attitude.thrust_value)
}

// -------------------------------------------------------------------

// ActuatorControlGroup

// repeated float controls = 1;
inline int ActuatorControlGroup::_internal_controls_size() const {
  return controls_.size();
}
inline int ActuatorControlGroup::controls_size() const {
  return _internal_controls_size();
}
inline void ActuatorControlGroup::clear_controls() {
  controls_.Clear();
}
inline float ActuatorControlGroup::_internal_controls(int index) const {
  return controls_.Get(index);
}
inline float ActuatorControlGroup::controls(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.ActuatorControlGroup.controls)
  return _internal_controls(index);
}
inline void ActuatorControlGroup::set_controls(int index, float value) {
  controls_.Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.ActuatorControlGroup.controls)
}
inline void ActuatorControlGroup::_internal_add_controls(float value) {
  controls_.Add(value);
}
inline void ActuatorControlGroup::add_controls(float value) {
  _internal_add_controls(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.offboard.ActuatorControlGroup.controls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ActuatorControlGroup::_internal_controls() const {
  return controls_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ActuatorControlGroup::controls() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.offboard.ActuatorControlGroup.controls)
  return _internal_controls();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ActuatorControlGroup::_internal_mutable_controls() {
  return &controls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ActuatorControlGroup::mutable_controls() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.offboard.ActuatorControlGroup.controls)
  return _internal_mutable_controls();
}

// -------------------------------------------------------------------

// ActuatorControl

// repeated .mavsdk.rpc.offboard.ActuatorControlGroup groups = 1;
inline int ActuatorControl::_internal_groups_size() const {
  return groups_.size();
}
inline int ActuatorControl::groups_size() const {
  return _internal_groups_size();
}
inline void ActuatorControl::clear_groups() {
  groups_.Clear();
}
inline ::mavsdk::rpc::offboard::ActuatorControlGroup* ActuatorControl::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.ActuatorControl.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::offboard::ActuatorControlGroup >*
ActuatorControl::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.offboard.ActuatorControl.groups)
  return &groups_;
}
inline const ::mavsdk::rpc::offboard::ActuatorControlGroup& ActuatorControl::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::mavsdk::rpc::offboard::ActuatorControlGroup& ActuatorControl::groups(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.ActuatorControl.groups)
  return _internal_groups(index);
}
inline ::mavsdk::rpc::offboard::ActuatorControlGroup* ActuatorControl::_internal_add_groups() {
  return groups_.Add();
}
inline ::mavsdk::rpc::offboard::ActuatorControlGroup* ActuatorControl::add_groups() {
  // @@protoc_insertion_point(field_add:mavsdk.rpc.offboard.ActuatorControl.groups)
  return _internal_add_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::offboard::ActuatorControlGroup >&
ActuatorControl::groups() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.offboard.ActuatorControl.groups)
  return groups_;
}

// -------------------------------------------------------------------

// AttitudeRate

// float roll_deg_s = 1;
inline void AttitudeRate::clear_roll_deg_s() {
  roll_deg_s_ = 0;
}
inline float AttitudeRate::_internal_roll_deg_s() const {
  return roll_deg_s_;
}
inline float AttitudeRate::roll_deg_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.AttitudeRate.roll_deg_s)
  return _internal_roll_deg_s();
}
inline void AttitudeRate::_internal_set_roll_deg_s(float value) {
  
  roll_deg_s_ = value;
}
inline void AttitudeRate::set_roll_deg_s(float value) {
  _internal_set_roll_deg_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.AttitudeRate.roll_deg_s)
}

// float pitch_deg_s = 2;
inline void AttitudeRate::clear_pitch_deg_s() {
  pitch_deg_s_ = 0;
}
inline float AttitudeRate::_internal_pitch_deg_s() const {
  return pitch_deg_s_;
}
inline float AttitudeRate::pitch_deg_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.AttitudeRate.pitch_deg_s)
  return _internal_pitch_deg_s();
}
inline void AttitudeRate::_internal_set_pitch_deg_s(float value) {
  
  pitch_deg_s_ = value;
}
inline void AttitudeRate::set_pitch_deg_s(float value) {
  _internal_set_pitch_deg_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.AttitudeRate.pitch_deg_s)
}

// float yaw_deg_s = 3;
inline void AttitudeRate::clear_yaw_deg_s() {
  yaw_deg_s_ = 0;
}
inline float AttitudeRate::_internal_yaw_deg_s() const {
  return yaw_deg_s_;
}
inline float AttitudeRate::yaw_deg_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.AttitudeRate.yaw_deg_s)
  return _internal_yaw_deg_s();
}
inline void AttitudeRate::_internal_set_yaw_deg_s(float value) {
  
  yaw_deg_s_ = value;
}
inline void AttitudeRate::set_yaw_deg_s(float value) {
  _internal_set_yaw_deg_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.AttitudeRate.yaw_deg_s)
}

// float thrust_value = 4;
inline void AttitudeRate::clear_thrust_value() {
  thrust_value_ = 0;
}
inline float AttitudeRate::_internal_thrust_value() const {
  return thrust_value_;
}
inline float AttitudeRate::thrust_value() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.AttitudeRate.thrust_value)
  return _internal_thrust_value();
}
inline void AttitudeRate::_internal_set_thrust_value(float value) {
  
  thrust_value_ = value;
}
inline void AttitudeRate::set_thrust_value(float value) {
  _internal_set_thrust_value(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.AttitudeRate.thrust_value)
}

// -------------------------------------------------------------------

// PositionNedYaw

// float north_m = 1;
inline void PositionNedYaw::clear_north_m() {
  north_m_ = 0;
}
inline float PositionNedYaw::_internal_north_m() const {
  return north_m_;
}
inline float PositionNedYaw::north_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.PositionNedYaw.north_m)
  return _internal_north_m();
}
inline void PositionNedYaw::_internal_set_north_m(float value) {
  
  north_m_ = value;
}
inline void PositionNedYaw::set_north_m(float value) {
  _internal_set_north_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.PositionNedYaw.north_m)
}

// float east_m = 2;
inline void PositionNedYaw::clear_east_m() {
  east_m_ = 0;
}
inline float PositionNedYaw::_internal_east_m() const {
  return east_m_;
}
inline float PositionNedYaw::east_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.PositionNedYaw.east_m)
  return _internal_east_m();
}
inline void PositionNedYaw::_internal_set_east_m(float value) {
  
  east_m_ = value;
}
inline void PositionNedYaw::set_east_m(float value) {
  _internal_set_east_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.PositionNedYaw.east_m)
}

// float down_m = 3;
inline void PositionNedYaw::clear_down_m() {
  down_m_ = 0;
}
inline float PositionNedYaw::_internal_down_m() const {
  return down_m_;
}
inline float PositionNedYaw::down_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.PositionNedYaw.down_m)
  return _internal_down_m();
}
inline void PositionNedYaw::_internal_set_down_m(float value) {
  
  down_m_ = value;
}
inline void PositionNedYaw::set_down_m(float value) {
  _internal_set_down_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.PositionNedYaw.down_m)
}

// float yaw_deg = 4;
inline void PositionNedYaw::clear_yaw_deg() {
  yaw_deg_ = 0;
}
inline float PositionNedYaw::_internal_yaw_deg() const {
  return yaw_deg_;
}
inline float PositionNedYaw::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.PositionNedYaw.yaw_deg)
  return _internal_yaw_deg();
}
inline void PositionNedYaw::_internal_set_yaw_deg(float value) {
  
  yaw_deg_ = value;
}
inline void PositionNedYaw::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.PositionNedYaw.yaw_deg)
}

// -------------------------------------------------------------------

// PositionGlobalYaw

// float lat = 1;
inline void PositionGlobalYaw::clear_lat() {
  lat_ = 0;
}
inline float PositionGlobalYaw::_internal_lat() const {
  return lat_;
}
inline float PositionGlobalYaw::lat() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.PositionGlobalYaw.lat)
  return _internal_lat();
}
inline void PositionGlobalYaw::_internal_set_lat(float value) {
  
  lat_ = value;
}
inline void PositionGlobalYaw::set_lat(float value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.PositionGlobalYaw.lat)
}

// float lon = 2;
inline void PositionGlobalYaw::clear_lon() {
  lon_ = 0;
}
inline float PositionGlobalYaw::_internal_lon() const {
  return lon_;
}
inline float PositionGlobalYaw::lon() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.PositionGlobalYaw.lon)
  return _internal_lon();
}
inline void PositionGlobalYaw::_internal_set_lon(float value) {
  
  lon_ = value;
}
inline void PositionGlobalYaw::set_lon(float value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.PositionGlobalYaw.lon)
}

// float alt = 3;
inline void PositionGlobalYaw::clear_alt() {
  alt_ = 0;
}
inline float PositionGlobalYaw::_internal_alt() const {
  return alt_;
}
inline float PositionGlobalYaw::alt() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.PositionGlobalYaw.alt)
  return _internal_alt();
}
inline void PositionGlobalYaw::_internal_set_alt(float value) {
  
  alt_ = value;
}
inline void PositionGlobalYaw::set_alt(float value) {
  _internal_set_alt(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.PositionGlobalYaw.alt)
}

// float yaw_deg = 4;
inline void PositionGlobalYaw::clear_yaw_deg() {
  yaw_deg_ = 0;
}
inline float PositionGlobalYaw::_internal_yaw_deg() const {
  return yaw_deg_;
}
inline float PositionGlobalYaw::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.PositionGlobalYaw.yaw_deg)
  return _internal_yaw_deg();
}
inline void PositionGlobalYaw::_internal_set_yaw_deg(float value) {
  
  yaw_deg_ = value;
}
inline void PositionGlobalYaw::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.PositionGlobalYaw.yaw_deg)
}

// -------------------------------------------------------------------

// VelocityBodyYawspeed

// float forward_m_s = 1;
inline void VelocityBodyYawspeed::clear_forward_m_s() {
  forward_m_s_ = 0;
}
inline float VelocityBodyYawspeed::_internal_forward_m_s() const {
  return forward_m_s_;
}
inline float VelocityBodyYawspeed::forward_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.VelocityBodyYawspeed.forward_m_s)
  return _internal_forward_m_s();
}
inline void VelocityBodyYawspeed::_internal_set_forward_m_s(float value) {
  
  forward_m_s_ = value;
}
inline void VelocityBodyYawspeed::set_forward_m_s(float value) {
  _internal_set_forward_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.VelocityBodyYawspeed.forward_m_s)
}

// float right_m_s = 2;
inline void VelocityBodyYawspeed::clear_right_m_s() {
  right_m_s_ = 0;
}
inline float VelocityBodyYawspeed::_internal_right_m_s() const {
  return right_m_s_;
}
inline float VelocityBodyYawspeed::right_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.VelocityBodyYawspeed.right_m_s)
  return _internal_right_m_s();
}
inline void VelocityBodyYawspeed::_internal_set_right_m_s(float value) {
  
  right_m_s_ = value;
}
inline void VelocityBodyYawspeed::set_right_m_s(float value) {
  _internal_set_right_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.VelocityBodyYawspeed.right_m_s)
}

// float down_m_s = 3;
inline void VelocityBodyYawspeed::clear_down_m_s() {
  down_m_s_ = 0;
}
inline float VelocityBodyYawspeed::_internal_down_m_s() const {
  return down_m_s_;
}
inline float VelocityBodyYawspeed::down_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.VelocityBodyYawspeed.down_m_s)
  return _internal_down_m_s();
}
inline void VelocityBodyYawspeed::_internal_set_down_m_s(float value) {
  
  down_m_s_ = value;
}
inline void VelocityBodyYawspeed::set_down_m_s(float value) {
  _internal_set_down_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.VelocityBodyYawspeed.down_m_s)
}

// float yawspeed_deg_s = 4;
inline void VelocityBodyYawspeed::clear_yawspeed_deg_s() {
  yawspeed_deg_s_ = 0;
}
inline float VelocityBodyYawspeed::_internal_yawspeed_deg_s() const {
  return yawspeed_deg_s_;
}
inline float VelocityBodyYawspeed::yawspeed_deg_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.VelocityBodyYawspeed.yawspeed_deg_s)
  return _internal_yawspeed_deg_s();
}
inline void VelocityBodyYawspeed::_internal_set_yawspeed_deg_s(float value) {
  
  yawspeed_deg_s_ = value;
}
inline void VelocityBodyYawspeed::set_yawspeed_deg_s(float value) {
  _internal_set_yawspeed_deg_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.VelocityBodyYawspeed.yawspeed_deg_s)
}

// -------------------------------------------------------------------

// VelocityNedYaw

// float north_m_s = 1;
inline void VelocityNedYaw::clear_north_m_s() {
  north_m_s_ = 0;
}
inline float VelocityNedYaw::_internal_north_m_s() const {
  return north_m_s_;
}
inline float VelocityNedYaw::north_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.VelocityNedYaw.north_m_s)
  return _internal_north_m_s();
}
inline void VelocityNedYaw::_internal_set_north_m_s(float value) {
  
  north_m_s_ = value;
}
inline void VelocityNedYaw::set_north_m_s(float value) {
  _internal_set_north_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.VelocityNedYaw.north_m_s)
}

// float east_m_s = 2;
inline void VelocityNedYaw::clear_east_m_s() {
  east_m_s_ = 0;
}
inline float VelocityNedYaw::_internal_east_m_s() const {
  return east_m_s_;
}
inline float VelocityNedYaw::east_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.VelocityNedYaw.east_m_s)
  return _internal_east_m_s();
}
inline void VelocityNedYaw::_internal_set_east_m_s(float value) {
  
  east_m_s_ = value;
}
inline void VelocityNedYaw::set_east_m_s(float value) {
  _internal_set_east_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.VelocityNedYaw.east_m_s)
}

// float down_m_s = 3;
inline void VelocityNedYaw::clear_down_m_s() {
  down_m_s_ = 0;
}
inline float VelocityNedYaw::_internal_down_m_s() const {
  return down_m_s_;
}
inline float VelocityNedYaw::down_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.VelocityNedYaw.down_m_s)
  return _internal_down_m_s();
}
inline void VelocityNedYaw::_internal_set_down_m_s(float value) {
  
  down_m_s_ = value;
}
inline void VelocityNedYaw::set_down_m_s(float value) {
  _internal_set_down_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.VelocityNedYaw.down_m_s)
}

// float yaw_deg = 4;
inline void VelocityNedYaw::clear_yaw_deg() {
  yaw_deg_ = 0;
}
inline float VelocityNedYaw::_internal_yaw_deg() const {
  return yaw_deg_;
}
inline float VelocityNedYaw::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.VelocityNedYaw.yaw_deg)
  return _internal_yaw_deg();
}
inline void VelocityNedYaw::_internal_set_yaw_deg(float value) {
  
  yaw_deg_ = value;
}
inline void VelocityNedYaw::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.VelocityNedYaw.yaw_deg)
}

// -------------------------------------------------------------------

// VelocityGlobalYaw

// float north_m_s = 1;
inline void VelocityGlobalYaw::clear_north_m_s() {
  north_m_s_ = 0;
}
inline float VelocityGlobalYaw::_internal_north_m_s() const {
  return north_m_s_;
}
inline float VelocityGlobalYaw::north_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.VelocityGlobalYaw.north_m_s)
  return _internal_north_m_s();
}
inline void VelocityGlobalYaw::_internal_set_north_m_s(float value) {
  
  north_m_s_ = value;
}
inline void VelocityGlobalYaw::set_north_m_s(float value) {
  _internal_set_north_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.VelocityGlobalYaw.north_m_s)
}

// float east_m_s = 2;
inline void VelocityGlobalYaw::clear_east_m_s() {
  east_m_s_ = 0;
}
inline float VelocityGlobalYaw::_internal_east_m_s() const {
  return east_m_s_;
}
inline float VelocityGlobalYaw::east_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.VelocityGlobalYaw.east_m_s)
  return _internal_east_m_s();
}
inline void VelocityGlobalYaw::_internal_set_east_m_s(float value) {
  
  east_m_s_ = value;
}
inline void VelocityGlobalYaw::set_east_m_s(float value) {
  _internal_set_east_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.VelocityGlobalYaw.east_m_s)
}

// float down_m_s = 3;
inline void VelocityGlobalYaw::clear_down_m_s() {
  down_m_s_ = 0;
}
inline float VelocityGlobalYaw::_internal_down_m_s() const {
  return down_m_s_;
}
inline float VelocityGlobalYaw::down_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.VelocityGlobalYaw.down_m_s)
  return _internal_down_m_s();
}
inline void VelocityGlobalYaw::_internal_set_down_m_s(float value) {
  
  down_m_s_ = value;
}
inline void VelocityGlobalYaw::set_down_m_s(float value) {
  _internal_set_down_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.VelocityGlobalYaw.down_m_s)
}

// float yaw_deg = 4;
inline void VelocityGlobalYaw::clear_yaw_deg() {
  yaw_deg_ = 0;
}
inline float VelocityGlobalYaw::_internal_yaw_deg() const {
  return yaw_deg_;
}
inline float VelocityGlobalYaw::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.VelocityGlobalYaw.yaw_deg)
  return _internal_yaw_deg();
}
inline void VelocityGlobalYaw::_internal_set_yaw_deg(float value) {
  
  yaw_deg_ = value;
}
inline void VelocityGlobalYaw::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.VelocityGlobalYaw.yaw_deg)
}

// -------------------------------------------------------------------

// OffboardResult

// .mavsdk.rpc.offboard.OffboardResult.Result result = 1;
inline void OffboardResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::offboard::OffboardResult_Result OffboardResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::offboard::OffboardResult_Result >(result_);
}
inline ::mavsdk::rpc::offboard::OffboardResult_Result OffboardResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.OffboardResult.result)
  return _internal_result();
}
inline void OffboardResult::_internal_set_result(::mavsdk::rpc::offboard::OffboardResult_Result value) {
  
  result_ = value;
}
inline void OffboardResult::set_result(::mavsdk::rpc::offboard::OffboardResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.OffboardResult.result)
}

// string result_str = 2;
inline void OffboardResult::clear_result_str() {
  result_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OffboardResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.offboard.OffboardResult.result_str)
  return _internal_result_str();
}
inline void OffboardResult::set_result_str(const std::string& value) {
  _internal_set_result_str(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.offboard.OffboardResult.result_str)
}
inline std::string* OffboardResult::mutable_result_str() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.offboard.OffboardResult.result_str)
  return _internal_mutable_result_str();
}
inline const std::string& OffboardResult::_internal_result_str() const {
  return result_str_.GetNoArena();
}
inline void OffboardResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OffboardResult::set_result_str(std::string&& value) {
  
  result_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.offboard.OffboardResult.result_str)
}
inline void OffboardResult::set_result_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.offboard.OffboardResult.result_str)
}
inline void OffboardResult::set_result_str(const char* value, size_t size) {
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.offboard.OffboardResult.result_str)
}
inline std::string* OffboardResult::_internal_mutable_result_str() {
  
  return result_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OffboardResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.offboard.OffboardResult.result_str)
  
  return result_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OffboardResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.offboard.OffboardResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace offboard
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::offboard::OffboardResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::offboard::OffboardResult_Result>() {
  return ::mavsdk::rpc::offboard::OffboardResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_offboard_2foffboard_2eproto
