// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/mission_raw/mission_raw.proto)

#include "mission_raw/mission_raw.grpc.pb.h"
#include "plugins/mission_raw/mission_raw.h"

#include "log.h"
#include <atomic>
#include <cmath>
#include <future>
#include <limits>
#include <memory>
#include <sstream>
#include <vector>

namespace mavsdk {
namespace backend {

template<typename MissionRaw = MissionRaw>
class MissionRawServiceImpl final : public rpc::mission_raw::MissionRawService::Service {
public:
    MissionRawServiceImpl(MissionRaw& mission_raw) : _mission_raw(mission_raw) {}


    template<typename ResponseType>
    void fillResponseWithResult(ResponseType* response, mavsdk::MissionRaw::Result& result) const
    {
        auto rpc_result = translateToRpcResult(result);

        auto* rpc_mission_raw_result = new rpc::mission_raw::MissionRawResult();
        rpc_mission_raw_result->set_result(rpc_result);
        std::stringstream ss;
        ss << result;
        rpc_mission_raw_result->set_result_str(ss.str());

        response->set_allocated_mission_raw_result(rpc_mission_raw_result);
    }




    static std::unique_ptr<rpc::mission_raw::MissionProgress> translateToRpcMissionProgress(const mavsdk::MissionRaw::MissionProgress &mission_progress)
    {
        std::unique_ptr<rpc::mission_raw::MissionProgress> rpc_obj(new rpc::mission_raw::MissionProgress());


            
        rpc_obj->set_current(mission_progress.current);
            
        
            
        rpc_obj->set_total(mission_progress.total);
            
        

        return rpc_obj;
    }

    static mavsdk::MissionRaw::MissionProgress translateFromRpcMissionProgress(const rpc::mission_raw::MissionProgress& mission_progress)
    {
        mavsdk::MissionRaw::MissionProgress obj;


            
        obj.current = mission_progress.current();
            
        
            
        obj.total = mission_progress.total();
            
        
        return obj;
    }





    static std::unique_ptr<rpc::mission_raw::MissionItem> translateToRpcMissionItem(const mavsdk::MissionRaw::MissionItem &mission_item)
    {
        std::unique_ptr<rpc::mission_raw::MissionItem> rpc_obj(new rpc::mission_raw::MissionItem());


            
        rpc_obj->set_seq(mission_item.seq);
            
        
            
        rpc_obj->set_frame(mission_item.frame);
            
        
            
        rpc_obj->set_command(mission_item.command);
            
        
            
        rpc_obj->set_current(mission_item.current);
            
        
            
        rpc_obj->set_autocontinue(mission_item.autocontinue);
            
        
            
        rpc_obj->set_param1(mission_item.param1);
            
        
            
        rpc_obj->set_param2(mission_item.param2);
            
        
            
        rpc_obj->set_param3(mission_item.param3);
            
        
            
        rpc_obj->set_param4(mission_item.param4);
            
        
            
        rpc_obj->set_x(mission_item.x);
            
        
            
        rpc_obj->set_y(mission_item.y);
            
        
            
        rpc_obj->set_z(mission_item.z);
            
        
            
        rpc_obj->set_mission_type(mission_item.mission_type);
            
        

        return rpc_obj;
    }

    static mavsdk::MissionRaw::MissionItem translateFromRpcMissionItem(const rpc::mission_raw::MissionItem& mission_item)
    {
        mavsdk::MissionRaw::MissionItem obj;


            
        obj.seq = mission_item.seq();
            
        
            
        obj.frame = mission_item.frame();
            
        
            
        obj.command = mission_item.command();
            
        
            
        obj.current = mission_item.current();
            
        
            
        obj.autocontinue = mission_item.autocontinue();
            
        
            
        obj.param1 = mission_item.param1();
            
        
            
        obj.param2 = mission_item.param2();
            
        
            
        obj.param3 = mission_item.param3();
            
        
            
        obj.param4 = mission_item.param4();
            
        
            
        obj.x = mission_item.x();
            
        
            
        obj.y = mission_item.y();
            
        
            
        obj.z = mission_item.z();
            
        
            
        obj.mission_type = mission_item.mission_type();
            
        
        return obj;
    }




    static rpc::mission_raw::MissionRawResult::Result translateToRpcResult(const mavsdk::MissionRaw::Result& result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case mavsdk::MissionRaw::Result::Unknown:
                return rpc::mission_raw::MissionRawResult_Result_RESULT_UNKNOWN;
            case mavsdk::MissionRaw::Result::Success:
                return rpc::mission_raw::MissionRawResult_Result_RESULT_SUCCESS;
            case mavsdk::MissionRaw::Result::Error:
                return rpc::mission_raw::MissionRawResult_Result_RESULT_ERROR;
            case mavsdk::MissionRaw::Result::TooManyMissionItems:
                return rpc::mission_raw::MissionRawResult_Result_RESULT_TOO_MANY_MISSION_ITEMS;
            case mavsdk::MissionRaw::Result::Busy:
                return rpc::mission_raw::MissionRawResult_Result_RESULT_BUSY;
            case mavsdk::MissionRaw::Result::Timeout:
                return rpc::mission_raw::MissionRawResult_Result_RESULT_TIMEOUT;
            case mavsdk::MissionRaw::Result::InvalidArgument:
                return rpc::mission_raw::MissionRawResult_Result_RESULT_INVALID_ARGUMENT;
            case mavsdk::MissionRaw::Result::Unsupported:
                return rpc::mission_raw::MissionRawResult_Result_RESULT_UNSUPPORTED;
            case mavsdk::MissionRaw::Result::NoMissionAvailable:
                return rpc::mission_raw::MissionRawResult_Result_RESULT_NO_MISSION_AVAILABLE;
            case mavsdk::MissionRaw::Result::TransferCancelled:
                return rpc::mission_raw::MissionRawResult_Result_RESULT_TRANSFER_CANCELLED;
        }
    }

    static mavsdk::MissionRaw::Result translateFromRpcResult(const rpc::mission_raw::MissionRawResult::Result result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case rpc::mission_raw::MissionRawResult_Result_RESULT_UNKNOWN:
                return mavsdk::MissionRaw::Result::Unknown;
            case rpc::mission_raw::MissionRawResult_Result_RESULT_SUCCESS:
                return mavsdk::MissionRaw::Result::Success;
            case rpc::mission_raw::MissionRawResult_Result_RESULT_ERROR:
                return mavsdk::MissionRaw::Result::Error;
            case rpc::mission_raw::MissionRawResult_Result_RESULT_TOO_MANY_MISSION_ITEMS:
                return mavsdk::MissionRaw::Result::TooManyMissionItems;
            case rpc::mission_raw::MissionRawResult_Result_RESULT_BUSY:
                return mavsdk::MissionRaw::Result::Busy;
            case rpc::mission_raw::MissionRawResult_Result_RESULT_TIMEOUT:
                return mavsdk::MissionRaw::Result::Timeout;
            case rpc::mission_raw::MissionRawResult_Result_RESULT_INVALID_ARGUMENT:
                return mavsdk::MissionRaw::Result::InvalidArgument;
            case rpc::mission_raw::MissionRawResult_Result_RESULT_UNSUPPORTED:
                return mavsdk::MissionRaw::Result::Unsupported;
            case rpc::mission_raw::MissionRawResult_Result_RESULT_NO_MISSION_AVAILABLE:
                return mavsdk::MissionRaw::Result::NoMissionAvailable;
            case rpc::mission_raw::MissionRawResult_Result_RESULT_TRANSFER_CANCELLED:
                return mavsdk::MissionRaw::Result::TransferCancelled;
        }
    }




    grpc::Status UploadMission(
        grpc::ServerContext* /* context */,
        const rpc::mission_raw::UploadMissionRequest* request,
        rpc::mission_raw::UploadMissionResponse* response) override
    {
        if (request == nullptr) {
            LogWarn() << "UploadMission sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }
            
        std::vector<mavsdk::MissionRaw::MissionItem> mission_items_vec;
        for (const auto& elem : request->mission_items()) {
            mission_items_vec.push_back(translateFromRpcMissionItem(elem));
        }
            
        
        auto result = _mission_raw.upload_mission(mission_items_vec);
        

        
        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }
        

        return grpc::Status::OK;
    }

    grpc::Status CancelMissionUpload(
        grpc::ServerContext* /* context */,
        const rpc::mission_raw::CancelMissionUploadRequest* /* request */,
        rpc::mission_raw::CancelMissionUploadResponse* response) override
    {
        
        auto result = _mission_raw.cancel_mission_upload();
        

        
        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }
        

        return grpc::Status::OK;
    }

    grpc::Status DownloadMission(
        grpc::ServerContext* /* context */,
        const rpc::mission_raw::DownloadMissionRequest* /* request */,
        rpc::mission_raw::DownloadMissionResponse* response) override
    {
        

        auto result = _mission_raw.download_mission();

        if (response != nullptr) {
            fillResponseWithResult(response, result.first);
            
            for (auto elem : result.second) {
                
                auto* ptr = response->add_mission_items();
                ptr->CopyFrom(*translateToRpcMissionItem(elem).release());
                
            }
            
        }


        return grpc::Status::OK;
    }

    grpc::Status CancelMissionDownload(
        grpc::ServerContext* /* context */,
        const rpc::mission_raw::CancelMissionDownloadRequest* /* request */,
        rpc::mission_raw::CancelMissionDownloadResponse* response) override
    {
        
        auto result = _mission_raw.cancel_mission_download();
        

        
        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }
        

        return grpc::Status::OK;
    }

    grpc::Status StartMission(
        grpc::ServerContext* /* context */,
        const rpc::mission_raw::StartMissionRequest* /* request */,
        rpc::mission_raw::StartMissionResponse* response) override
    {
        
        auto result = _mission_raw.start_mission();
        

        
        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }
        

        return grpc::Status::OK;
    }

    grpc::Status PauseMission(
        grpc::ServerContext* /* context */,
        const rpc::mission_raw::PauseMissionRequest* /* request */,
        rpc::mission_raw::PauseMissionResponse* response) override
    {
        
        auto result = _mission_raw.pause_mission();
        

        
        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }
        

        return grpc::Status::OK;
    }

    grpc::Status ClearMission(
        grpc::ServerContext* /* context */,
        const rpc::mission_raw::ClearMissionRequest* /* request */,
        rpc::mission_raw::ClearMissionResponse* response) override
    {
        
        auto result = _mission_raw.clear_mission();
        

        
        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }
        

        return grpc::Status::OK;
    }

    grpc::Status SetCurrentMissionItem(
        grpc::ServerContext* /* context */,
        const rpc::mission_raw::SetCurrentMissionItemRequest* request,
        rpc::mission_raw::SetCurrentMissionItemResponse* response) override
    {
        if (request == nullptr) {
            LogWarn() << "SetCurrentMissionItem sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }
            
        
        auto result = _mission_raw.set_current_mission_item(request->index());
        

        
        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }
        

        return grpc::Status::OK;
    }

    grpc::Status SubscribeMissionProgress(grpc::ServerContext* /* context */, const mavsdk::rpc::mission_raw::SubscribeMissionProgressRequest* /* request */, grpc::ServerWriter<rpc::mission_raw::MissionProgressResponse>* writer) override
    {
        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        auto is_finished = std::make_shared<bool>(false);

        std::mutex subscribe_mutex{};

        _mission_raw.subscribe_mission_progress(
            [this, &writer, &stream_closed_promise, is_finished, &subscribe_mutex](const mavsdk::MissionRaw::MissionProgress mission_progress) {

            rpc::mission_raw::MissionProgressResponse rpc_response;
        
            rpc_response.set_allocated_mission_progress(translateToRpcMissionProgress(mission_progress).release());
        

        

            std::unique_lock<std::mutex> lock(subscribe_mutex);
            if (!*is_finished && !writer->Write(rpc_response)) {
                
                _mission_raw.subscribe_mission_progress(nullptr);
                
                *is_finished = true;
                unregister_stream_stop_promise(stream_closed_promise);
                lock.unlock();
                stream_closed_promise->set_value();
            }
        });

        stream_closed_future.wait();
        return grpc::Status::OK;
    }

    grpc::Status SubscribeMissionChanged(grpc::ServerContext* /* context */, const mavsdk::rpc::mission_raw::SubscribeMissionChangedRequest* /* request */, grpc::ServerWriter<rpc::mission_raw::MissionChangedResponse>* writer) override
    {
        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        auto is_finished = std::make_shared<bool>(false);

        std::mutex subscribe_mutex{};

        _mission_raw.subscribe_mission_changed(
            [this, &writer, &stream_closed_promise, is_finished, &subscribe_mutex](const bool mission_changed) {

            rpc::mission_raw::MissionChangedResponse rpc_response;
        
            rpc_response.set_mission_changed(mission_changed);
        

        

            std::unique_lock<std::mutex> lock(subscribe_mutex);
            if (!*is_finished && !writer->Write(rpc_response)) {
                
                _mission_raw.subscribe_mission_changed(nullptr);
                
                *is_finished = true;
                unregister_stream_stop_promise(stream_closed_promise);
                lock.unlock();
                stream_closed_promise->set_value();
            }
        });

        stream_closed_future.wait();
        return grpc::Status::OK;
    }


    void stop() {
        _stopped.store(true);
        for (auto& prom : _stream_stop_promises) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        }
    }

private:
    void register_stream_stop_promise(std::weak_ptr<std::promise<void>> prom) {
        // If we have already stopped, set promise immediately and don't add it to list.
        if (_stopped.load()) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        } else {
            _stream_stop_promises.push_back(prom);
        }
    }

    void unregister_stream_stop_promise(std::shared_ptr<std::promise<void>> prom) {
        for (auto it = _stream_stop_promises.begin(); it != _stream_stop_promises.end(); /* ++it */) {
            if (it->lock() == prom) {
                it = _stream_stop_promises.erase(it);
            } else {
                ++it;
            }
        }
    }

    MissionRaw &_mission_raw;
    std::atomic<bool> _stopped{false};
    std::vector<std::weak_ptr<std::promise<void>>> _stream_stop_promises {};
};

} // namespace backend
} // namespace mavsdk